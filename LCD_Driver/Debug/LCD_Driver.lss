
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002912  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002912  00002986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002010  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ceb  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000056c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005803  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000084a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000093b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <main>
      7a:	0c 94 87 14 	jmp	0x290e	; 0x290e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e8       	ldi	r26, 0x88	; 136
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e8       	ldi	r24, 0x88	; 136
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_voidPortMode>:
#define DIO_PIND_Reg     *((volatile u8*) 0x30)

//port mode func///////////////////////////////////

void MDIO_voidPortMode(u8 A_u8Port , u8 A_u8Mode)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <MDIO_voidPortMode+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <MDIO_voidPortMode+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Port <= PORTD)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	84 30       	cpi	r24, 0x04	; 4
     b4a:	90 f5       	brcc	.+100    	; 0xbb0 <MDIO_voidPortMode+0x7a>
	{
		switch(A_u8Port)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	3c 83       	std	Y+4, r19	; 0x04
     b54:	2b 83       	std	Y+3, r18	; 0x03
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	91 05       	cpc	r25, r1
     b5e:	d1 f0       	breq	.+52     	; 0xb94 <MDIO_voidPortMode+0x5e>
     b60:	2b 81       	ldd	r18, Y+3	; 0x03
     b62:	3c 81       	ldd	r19, Y+4	; 0x04
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <MDIO_voidPortMode+0x3e>
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	61 f0       	breq	.+24     	; 0xb8a <MDIO_voidPortMode+0x54>
     b72:	1e c0       	rjmp	.+60     	; 0xbb0 <MDIO_voidPortMode+0x7a>
     b74:	2b 81       	ldd	r18, Y+3	; 0x03
     b76:	3c 81       	ldd	r19, Y+4	; 0x04
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	81 f0       	breq	.+32     	; 0xb9e <MDIO_voidPortMode+0x68>
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	91 05       	cpc	r25, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <MDIO_voidPortMode+0x72>
     b88:	13 c0       	rjmp	.+38     	; 0xbb0 <MDIO_voidPortMode+0x7a>
		{
			case PORTA : DIO_DDRA_Reg = A_u8Mode ; break ;
     b8a:	ea e3       	ldi	r30, 0x3A	; 58
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	80 83       	st	Z, r24
     b92:	0e c0       	rjmp	.+28     	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTB : DIO_DDRB_Reg = A_u8Mode ; break ;
     b94:	e7 e3       	ldi	r30, 0x37	; 55
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	80 83       	st	Z, r24
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTC : DIO_DDRC_Reg = A_u8Mode ; break ;
     b9e:	e4 e3       	ldi	r30, 0x34	; 52
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	80 83       	st	Z, r24
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTD : DIO_DDRD_Reg = A_u8Mode ; break ;
     ba8:	e1 e3       	ldi	r30, 0x31	; 49
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
		}
	}
}
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <MDIO_voidPortValue>:


//port value////////////////////////////
void MDIO_voidPortValue(u8 A_u8Port , u8 A_u8Value)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MDIO_voidPortValue+0x6>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <MDIO_voidPortValue+0x8>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Port <= PORTD)
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	90 f5       	brcc	.+100    	; 0xc38 <MDIO_voidPortValue+0x7a>
	{
		switch(A_u8Port)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3c 83       	std	Y+4, r19	; 0x04
     bdc:	2b 83       	std	Y+3, r18	; 0x03
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	d1 f0       	breq	.+52     	; 0xc1c <MDIO_voidPortValue+0x5e>
     be8:	2b 81       	ldd	r18, Y+3	; 0x03
     bea:	3c 81       	ldd	r19, Y+4	; 0x04
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	2c f4       	brge	.+10     	; 0xbfc <MDIO_voidPortValue+0x3e>
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	61 f0       	breq	.+24     	; 0xc12 <MDIO_voidPortValue+0x54>
     bfa:	1e c0       	rjmp	.+60     	; 0xc38 <MDIO_voidPortValue+0x7a>
     bfc:	2b 81       	ldd	r18, Y+3	; 0x03
     bfe:	3c 81       	ldd	r19, Y+4	; 0x04
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	81 f0       	breq	.+32     	; 0xc26 <MDIO_voidPortValue+0x68>
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	83 30       	cpi	r24, 0x03	; 3
     c0c:	91 05       	cpc	r25, r1
     c0e:	81 f0       	breq	.+32     	; 0xc30 <MDIO_voidPortValue+0x72>
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <MDIO_voidPortValue+0x7a>
		{
			case PORTA : DIO_PORTA_Reg = A_u8Value ; break ;
     c12:	eb e3       	ldi	r30, 0x3B	; 59
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	80 83       	st	Z, r24
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTB : DIO_PORTB_Reg = A_u8Value ; break ;
     c1c:	e8 e3       	ldi	r30, 0x38	; 56
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTC : DIO_PORTC_Reg = A_u8Value ; break ;
     c26:	e5 e3       	ldi	r30, 0x35	; 53
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	80 83       	st	Z, r24
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTD : DIO_PORTD_Reg = A_u8Value ; break ;
     c30:	e2 e3       	ldi	r30, 0x32	; 50
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	80 83       	st	Z, r24
		}
	}
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <MDIO_voidPinMode>:

//pin mode func///////////////////////////////////////////////

void MDIO_voidPinMode(u8 A_u8Port , u8 A_u8Pin , u8 A_u8Mode)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	27 97       	sbiw	r28, 0x07	; 7
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6a 83       	std	Y+2, r22	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	08 f0       	brcs	.+2      	; 0xc68 <MDIO_voidPinMode+0x22>
     c66:	f4 c0       	rjmp	.+488    	; 0xe50 <MDIO_voidPinMode+0x20a>
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	88 30       	cpi	r24, 0x08	; 8
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <MDIO_voidPinMode+0x2a>
     c6e:	f0 c0       	rjmp	.+480    	; 0xe50 <MDIO_voidPinMode+0x20a>
	{
		if ((A_u8Mode == OUTPUT) || (A_u8Mode == 1))
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	21 f0       	breq	.+8      	; 0xc7e <MDIO_voidPinMode+0x38>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <MDIO_voidPinMode+0x38>
     c7c:	6f c0       	rjmp	.+222    	; 0xd5c <MDIO_voidPinMode+0x116>
		{
			switch(A_u8Port)
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3f 83       	std	Y+7, r19	; 0x07
     c86:	2e 83       	std	Y+6, r18	; 0x06
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	9f 81       	ldd	r25, Y+7	; 0x07
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	91 05       	cpc	r25, r1
     c90:	49 f1       	breq	.+82     	; 0xce4 <MDIO_voidPinMode+0x9e>
     c92:	2e 81       	ldd	r18, Y+6	; 0x06
     c94:	3f 81       	ldd	r19, Y+7	; 0x07
     c96:	22 30       	cpi	r18, 0x02	; 2
     c98:	31 05       	cpc	r19, r1
     c9a:	2c f4       	brge	.+10     	; 0xca6 <MDIO_voidPinMode+0x60>
     c9c:	8e 81       	ldd	r24, Y+6	; 0x06
     c9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	61 f0       	breq	.+24     	; 0xcbc <MDIO_voidPinMode+0x76>
     ca4:	d5 c0       	rjmp	.+426    	; 0xe50 <MDIO_voidPinMode+0x20a>
     ca6:	2e 81       	ldd	r18, Y+6	; 0x06
     ca8:	3f 81       	ldd	r19, Y+7	; 0x07
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	31 05       	cpc	r19, r1
     cae:	71 f1       	breq	.+92     	; 0xd0c <MDIO_voidPinMode+0xc6>
     cb0:	8e 81       	ldd	r24, Y+6	; 0x06
     cb2:	9f 81       	ldd	r25, Y+7	; 0x07
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	91 05       	cpc	r25, r1
     cb8:	e9 f1       	breq	.+122    	; 0xd34 <MDIO_voidPinMode+0xee>
     cba:	ca c0       	rjmp	.+404    	; 0xe50 <MDIO_voidPinMode+0x20a>
			{
				case PORTA : LMTH_SetBit(DIO_DDRA_Reg , A_u8Pin) ; break ;
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <MDIO_voidPinMode+0x94>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <MDIO_voidPinMode+0x90>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	b6 c0       	rjmp	.+364    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTB : LMTH_SetBit(DIO_DDRB_Reg , A_u8Pin) ; break ;
     ce4:	a7 e3       	ldi	r26, 0x37	; 55
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e7 e3       	ldi	r30, 0x37	; 55
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <MDIO_voidPinMode+0xbc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <MDIO_voidPinMode+0xb8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	a2 c0       	rjmp	.+324    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTC : LMTH_SetBit(DIO_DDRC_Reg , A_u8Pin) ; break ;
     d0c:	a4 e3       	ldi	r26, 0x34	; 52
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e4 e3       	ldi	r30, 0x34	; 52
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MDIO_voidPinMode+0xe4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MDIO_voidPinMode+0xe0>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	8e c0       	rjmp	.+284    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTD : LMTH_SetBit(DIO_DDRD_Reg , A_u8Pin) ; break ;
     d34:	a1 e3       	ldi	r26, 0x31	; 49
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e1 e3       	ldi	r30, 0x31	; 49
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MDIO_voidPinMode+0x10c>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MDIO_voidPinMode+0x108>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	7a c0       	rjmp	.+244    	; 0xe50 <MDIO_voidPinMode+0x20a>
			}
		}
		else if ((A_u8Mode == INPUT) || (A_u8Mode == 0))
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	88 23       	and	r24, r24
     d60:	21 f0       	breq	.+8      	; 0xd6a <MDIO_voidPinMode+0x124>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	88 23       	and	r24, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <MDIO_voidPinMode+0x124>
     d68:	73 c0       	rjmp	.+230    	; 0xe50 <MDIO_voidPinMode+0x20a>
		{
			switch(A_u8Port)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	59 f1       	breq	.+86     	; 0xdd4 <MDIO_voidPinMode+0x18e>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <MDIO_voidPinMode+0x14c>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f0       	breq	.+26     	; 0xdaa <MDIO_voidPinMode+0x164>
     d90:	5f c0       	rjmp	.+190    	; 0xe50 <MDIO_voidPinMode+0x20a>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	89 f1       	breq	.+98     	; 0xdfe <MDIO_voidPinMode+0x1b8>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <MDIO_voidPinMode+0x162>
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <MDIO_voidPinMode+0x1e2>
     da8:	53 c0       	rjmp	.+166    	; 0xe50 <MDIO_voidPinMode+0x20a>
			{
				case PORTA : LMTH_ClrBit(DIO_DDRA_Reg , A_u8Pin) ; break ;
     daa:	aa e3       	ldi	r26, 0x3A	; 58
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea e3       	ldi	r30, 0x3A	; 58
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <MDIO_voidPinMode+0x182>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <MDIO_voidPinMode+0x17e>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	3e c0       	rjmp	.+124    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTB : LMTH_ClrBit(DIO_DDRB_Reg , A_u8Pin) ; break ;
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <MDIO_voidPinMode+0x1ac>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <MDIO_voidPinMode+0x1a8>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	29 c0       	rjmp	.+82     	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTC : LMTH_ClrBit(DIO_DDRC_Reg , A_u8Pin) ; break ;
     dfe:	a4 e3       	ldi	r26, 0x34	; 52
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e3       	ldi	r30, 0x34	; 52
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <MDIO_voidPinMode+0x1d6>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <MDIO_voidPinMode+0x1d2>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTD : LMTH_ClrBit(DIO_DDRD_Reg , A_u8Pin) ; break ;
     e28:	a1 e3       	ldi	r26, 0x31	; 49
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e1 e3       	ldi	r30, 0x31	; 49
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <MDIO_voidPinMode+0x200>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <MDIO_voidPinMode+0x1fc>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
			}
		}
	}
}
     e50:	27 96       	adiw	r28, 0x07	; 7
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <MDIO_voidPinValue>:

//pin output func/////////////////////////////////////

void MDIO_voidPinValue(u8 A_u8Port , u8 A_u8Pin , u8 A_u8Value)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	27 97       	sbiw	r28, 0x07	; 7
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
     e7a:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	08 f0       	brcs	.+2      	; 0xe84 <MDIO_voidPinValue+0x22>
     e82:	f4 c0       	rjmp	.+488    	; 0x106c <MDIO_voidPinValue+0x20a>
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 30       	cpi	r24, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <MDIO_voidPinValue+0x2a>
     e8a:	f0 c0       	rjmp	.+480    	; 0x106c <MDIO_voidPinValue+0x20a>
	{
		if ((A_u8Value == HIGH) || (A_u8Value == 1))
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	21 f0       	breq	.+8      	; 0xe9a <MDIO_voidPinValue+0x38>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <MDIO_voidPinValue+0x38>
     e98:	6f c0       	rjmp	.+222    	; 0xf78 <MDIO_voidPinValue+0x116>
		{
			switch(A_u8Port)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3f 83       	std	Y+7, r19	; 0x07
     ea2:	2e 83       	std	Y+6, r18	; 0x06
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	49 f1       	breq	.+82     	; 0xf00 <MDIO_voidPinValue+0x9e>
     eae:	2e 81       	ldd	r18, Y+6	; 0x06
     eb0:	3f 81       	ldd	r19, Y+7	; 0x07
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <MDIO_voidPinValue+0x60>
     eb8:	8e 81       	ldd	r24, Y+6	; 0x06
     eba:	9f 81       	ldd	r25, Y+7	; 0x07
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	61 f0       	breq	.+24     	; 0xed8 <MDIO_voidPinValue+0x76>
     ec0:	d5 c0       	rjmp	.+426    	; 0x106c <MDIO_voidPinValue+0x20a>
     ec2:	2e 81       	ldd	r18, Y+6	; 0x06
     ec4:	3f 81       	ldd	r19, Y+7	; 0x07
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	71 f1       	breq	.+92     	; 0xf28 <MDIO_voidPinValue+0xc6>
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	e9 f1       	breq	.+122    	; 0xf50 <MDIO_voidPinValue+0xee>
     ed6:	ca c0       	rjmp	.+404    	; 0x106c <MDIO_voidPinValue+0x20a>
			{
				case PORTA : LMTH_SetBit(DIO_PORTA_Reg , A_u8Pin) ; break ;
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidPinValue+0x94>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidPinValue+0x90>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	b6 c0       	rjmp	.+364    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTB : LMTH_SetBit(DIO_PORTB_Reg , A_u8Pin) ; break ;
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidPinValue+0xbc>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidPinValue+0xb8>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	a2 c0       	rjmp	.+324    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTC : LMTH_SetBit(DIO_PORTC_Reg , A_u8Pin) ; break ;
     f28:	a5 e3       	ldi	r26, 0x35	; 53
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <MDIO_voidPinValue+0xe4>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <MDIO_voidPinValue+0xe0>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	8e c0       	rjmp	.+284    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTD : LMTH_SetBit(DIO_PORTD_Reg , A_u8Pin) ; break ;
     f50:	a2 e3       	ldi	r26, 0x32	; 50
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <MDIO_voidPinValue+0x10c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <MDIO_voidPinValue+0x108>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	7a c0       	rjmp	.+244    	; 0x106c <MDIO_voidPinValue+0x20a>
			}
		}
		else if ((A_u8Value == LOW) || (A_u8Value == 0))
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 23       	and	r24, r24
     f7c:	21 f0       	breq	.+8      	; 0xf86 <MDIO_voidPinValue+0x124>
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <MDIO_voidPinValue+0x124>
     f84:	73 c0       	rjmp	.+230    	; 0x106c <MDIO_voidPinValue+0x20a>
		{
			switch(A_u8Port)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	59 f1       	breq	.+86     	; 0xff0 <MDIO_voidPinValue+0x18e>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <MDIO_voidPinValue+0x14c>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f0       	breq	.+26     	; 0xfc6 <MDIO_voidPinValue+0x164>
     fac:	5f c0       	rjmp	.+190    	; 0x106c <MDIO_voidPinValue+0x20a>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	89 f1       	breq	.+98     	; 0x101a <MDIO_voidPinValue+0x1b8>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <MDIO_voidPinValue+0x162>
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <MDIO_voidPinValue+0x1e2>
     fc4:	53 c0       	rjmp	.+166    	; 0x106c <MDIO_voidPinValue+0x20a>
			{
				case PORTA : LMTH_ClrBit(DIO_PORTA_Reg , A_u8Pin) ; break ;
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_voidPinValue+0x182>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_voidPinValue+0x17e>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	3e c0       	rjmp	.+124    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTB : LMTH_ClrBit(DIO_PORTB_Reg , A_u8Pin) ; break ;
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e3       	ldi	r30, 0x38	; 56
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <MDIO_voidPinValue+0x1ac>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <MDIO_voidPinValue+0x1a8>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	29 c0       	rjmp	.+82     	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTC : LMTH_ClrBit(DIO_PORTC_Reg , A_u8Pin) ; break ;
    101a:	a5 e3       	ldi	r26, 0x35	; 53
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e3       	ldi	r30, 0x35	; 53
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <MDIO_voidPinValue+0x1d6>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <MDIO_voidPinValue+0x1d2>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	14 c0       	rjmp	.+40     	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTD : LMTH_ClrBit(DIO_PORTD_Reg , A_u8Pin) ; break ;
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <MDIO_voidPinValue+0x200>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <MDIO_voidPinValue+0x1fc>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
			}
		}
	}
}
    106c:	27 96       	adiw	r28, 0x07	; 7
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <MDIO_u8PinRead>:

//pin read func////////////////////////

u8 MDIO_u8PinRead(u8 A_u8Port , u8 A_u8Pin)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <MDIO_u8PinRead+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <MDIO_u8PinRead+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6b 83       	std	Y+3, r22	; 0x03
	u8 read ;
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <MDIO_u8PinRead+0x1a>
    1096:	6b c0       	rjmp	.+214    	; 0x116e <MDIO_u8PinRead+0xf0>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <MDIO_u8PinRead+0x22>
    109e:	67 c0       	rjmp	.+206    	; 0x116e <MDIO_u8PinRead+0xf0>
	{
		switch(A_u8Port)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	4c 81       	ldd	r20, Y+4	; 0x04
    10ac:	5d 81       	ldd	r21, Y+5	; 0x05
    10ae:	41 30       	cpi	r20, 0x01	; 1
    10b0:	51 05       	cpc	r21, r1
    10b2:	41 f1       	breq	.+80     	; 0x1104 <MDIO_u8PinRead+0x86>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	91 05       	cpc	r25, r1
    10bc:	34 f4       	brge	.+12     	; 0x10ca <MDIO_u8PinRead+0x4c>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <MDIO_u8PinRead+0x62>
    10c8:	52 c0       	rjmp	.+164    	; 0x116e <MDIO_u8PinRead+0xf0>
    10ca:	4c 81       	ldd	r20, Y+4	; 0x04
    10cc:	5d 81       	ldd	r21, Y+5	; 0x05
    10ce:	42 30       	cpi	r20, 0x02	; 2
    10d0:	51 05       	cpc	r21, r1
    10d2:	51 f1       	breq	.+84     	; 0x1128 <MDIO_u8PinRead+0xaa>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	b9 f1       	breq	.+110    	; 0x114c <MDIO_u8PinRead+0xce>
    10de:	47 c0       	rjmp	.+142    	; 0x116e <MDIO_u8PinRead+0xf0>
		{
			case PORTA : read = LMTH_GetBit(DIO_PINA_Reg , A_u8Pin) ; break ;
    10e0:	e9 e3       	ldi	r30, 0x39	; 57
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <MDIO_u8PinRead+0x7a>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <MDIO_u8PinRead+0x76>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	35 c0       	rjmp	.+106    	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTB : read = LMTH_GetBit(DIO_PINB_Reg , A_u8Pin) ; break ;
    1104:	e6 e3       	ldi	r30, 0x36	; 54
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <MDIO_u8PinRead+0x9e>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <MDIO_u8PinRead+0x9a>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	23 c0       	rjmp	.+70     	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTC : read = LMTH_GetBit(DIO_PINC_Reg , A_u8Pin) ; break ;
    1128:	e3 e3       	ldi	r30, 0x33	; 51
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <MDIO_u8PinRead+0xc2>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <MDIO_u8PinRead+0xbe>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	11 c0       	rjmp	.+34     	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTD : read = LMTH_GetBit(DIO_PIND_Reg , A_u8Pin) ; break ;
    114c:	e0 e3       	ldi	r30, 0x30	; 48
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <MDIO_u8PinRead+0xe6>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <MDIO_u8PinRead+0xe2>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
return read ;}
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <HLCD_voidSendCommand>:
#include"../../MCAL/DIO/DIO.h"
#include<util/delay.h>
#include"LCD.h"

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	2f 97       	sbiw	r28, 0x0f	; 15
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidPinValue(LCD_ControlPort , PIN0 , LOW) ;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN1 , LOW) ;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPortValue(LCD_DataPort , A_u8Cmd) ;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    11ae:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , HIGH) ;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	62 e0       	ldi	r22, 0x02	; 2
    11b6:	4f ef       	ldi	r20, 0xFF	; 255
    11b8:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e8       	ldi	r26, 0x80	; 128
    11c2:	bf e3       	ldi	r27, 0x3F	; 63
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
    11c6:	9c 87       	std	Y+12, r25	; 0x0c
    11c8:	ad 87       	std	Y+13, r26	; 0x0d
    11ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a ef       	ldi	r20, 0xFA	; 250
    11da:	54 e4       	ldi	r21, 0x44	; 68
    11dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	2c f4       	brge	.+10     	; 0x120e <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	3f c0       	rjmp	.+126    	; 0x128c <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	4c f5       	brge	.+82     	; 0x1278 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <HLCD_voidSendCommand+0xee>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <HLCD_voidSendCommand+0xdc>
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <HLCD_voidSendCommand+0xd0>
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <HLCD_voidSendCommand+0x118>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , LOW) ;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	62 e0       	ldi	r22, 0x02	; 2
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
}
    12aa:	2f 96       	adiw	r28, 0x0f	; 15
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	2f 97       	sbiw	r28, 0x0f	; 15
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidPinValue(LCD_ControlPort , PIN0 , HIGH) ;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	4f ef       	ldi	r20, 0xFF	; 255
    12d8:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN1 , LOW) ;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPortValue(LCD_DataPort , A_u8Data) ;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ea:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , HIGH) ;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	62 e0       	ldi	r22, 0x02	; 2
    12f2:	4f ef       	ldi	r20, 0xFF	; 255
    12f4:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e8       	ldi	r26, 0x80	; 128
    12fe:	bf e3       	ldi	r27, 0x3F	; 63
    1300:	8b 87       	std	Y+11, r24	; 0x0b
    1302:	9c 87       	std	Y+12, r25	; 0x0c
    1304:	ad 87       	std	Y+13, r26	; 0x0d
    1306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	a9 87       	std	Y+9, r26	; 0x09
    1326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <HLCD_voidSendData+0xee>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <HLCD_voidSendData+0xdc>
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <HLCD_voidSendData+0xd0>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <HLCD_voidSendData+0x118>
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , LOW) ;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	62 e0       	ldi	r22, 0x02	; 2
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
}
    13e6:	2f 96       	adiw	r28, 0x0f	; 15
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <HLCD_voidLcdInit>:


void HLCD_voidLcdInit()
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	e8 97       	sbiw	r28, 0x38	; 56
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidPortMode(PORTA , OUTPUT) ;
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	6f ef       	ldi	r22, 0xFF	; 255
    1410:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
	MDIO_voidPortMode(PORTB , OUTPUT) ;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 ef       	ldi	r26, 0xF0	; 240
    1422:	b1 e4       	ldi	r27, 0x41	; 65
    1424:	8d ab       	std	Y+53, r24	; 0x35
    1426:	9e ab       	std	Y+54, r25	; 0x36
    1428:	af ab       	std	Y+55, r26	; 0x37
    142a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6d a9       	ldd	r22, Y+53	; 0x35
    142e:	7e a9       	ldd	r23, Y+54	; 0x36
    1430:	8f a9       	ldd	r24, Y+55	; 0x37
    1432:	98 ad       	ldd	r25, Y+56	; 0x38
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a ef       	ldi	r20, 0xFA	; 250
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	89 ab       	std	Y+49, r24	; 0x31
    1446:	9a ab       	std	Y+50, r25	; 0x32
    1448:	ab ab       	std	Y+51, r26	; 0x33
    144a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    144c:	69 a9       	ldd	r22, Y+49	; 0x31
    144e:	7a a9       	ldd	r23, Y+50	; 0x32
    1450:	8b a9       	ldd	r24, Y+51	; 0x33
    1452:	9c a9       	ldd	r25, Y+52	; 0x34
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <HLCD_voidLcdInit+0x76>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	98 ab       	std	Y+48, r25	; 0x30
    146a:	8f a7       	std	Y+47, r24	; 0x2f
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <HLCD_voidLcdInit+0xf4>
	else if (__tmp > 65535)
    146e:	69 a9       	ldd	r22, Y+49	; 0x31
    1470:	7a a9       	ldd	r23, Y+50	; 0x32
    1472:	8b a9       	ldd	r24, Y+51	; 0x33
    1474:	9c a9       	ldd	r25, Y+52	; 0x34
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <HLCD_voidLcdInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6d a9       	ldd	r22, Y+53	; 0x35
    1488:	7e a9       	ldd	r23, Y+54	; 0x36
    148a:	8f a9       	ldd	r24, Y+55	; 0x37
    148c:	98 ad       	ldd	r25, Y+56	; 0x38
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	98 ab       	std	Y+48, r25	; 0x30
    14ac:	8f a7       	std	Y+47, r24	; 0x2f
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <HLCD_voidLcdInit+0xd6>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
    14b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <HLCD_voidLcdInit+0xc4>
    14c0:	9e a7       	std	Y+46, r25	; 0x2e
    14c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c6:	98 a9       	ldd	r25, Y+48	; 0x30
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	98 ab       	std	Y+48, r25	; 0x30
    14cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d0:	98 a9       	ldd	r25, Y+48	; 0x30
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <HLCD_voidLcdInit+0xb8>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <HLCD_voidLcdInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	69 a9       	ldd	r22, Y+49	; 0x31
    14da:	7a a9       	ldd	r23, Y+50	; 0x32
    14dc:	8b a9       	ldd	r24, Y+51	; 0x33
    14de:	9c a9       	ldd	r25, Y+52	; 0x34
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	98 ab       	std	Y+48, r25	; 0x30
    14ea:	8f a7       	std	Y+47, r24	; 0x2f
    14ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ee:	98 a9       	ldd	r25, Y+48	; 0x30
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
    14f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <HLCD_voidLcdInit+0x100>
    14fc:	9c a7       	std	Y+44, r25	; 0x2c
    14fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30) ;
	HLCD_voidSendCommand(LCD_FuncSet)  ;
    1500:	88 e3       	ldi	r24, 0x38	; 56
    1502:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e8       	ldi	r26, 0x80	; 128
    150c:	bf e3       	ldi	r27, 0x3F	; 63
    150e:	8f a3       	std	Y+39, r24	; 0x27
    1510:	98 a7       	std	Y+40, r25	; 0x28
    1512:	a9 a7       	std	Y+41, r26	; 0x29
    1514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6f a1       	ldd	r22, Y+39	; 0x27
    1518:	78 a5       	ldd	r23, Y+40	; 0x28
    151a:	89 a5       	ldd	r24, Y+41	; 0x29
    151c:	9a a5       	ldd	r25, Y+42	; 0x2a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a ef       	ldi	r20, 0xFA	; 250
    1524:	54 e4       	ldi	r21, 0x44	; 68
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8b a3       	std	Y+35, r24	; 0x23
    1530:	9c a3       	std	Y+36, r25	; 0x24
    1532:	ad a3       	std	Y+37, r26	; 0x25
    1534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1536:	6b a1       	ldd	r22, Y+35	; 0x23
    1538:	7c a1       	ldd	r23, Y+36	; 0x24
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	9e a1       	ldd	r25, Y+38	; 0x26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <HLCD_voidLcdInit+0x160>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <HLCD_voidLcdInit+0x1de>
	else if (__tmp > 65535)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <HLCD_voidLcdInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6f a1       	ldd	r22, Y+39	; 0x27
    1572:	78 a5       	ldd	r23, Y+40	; 0x28
    1574:	89 a5       	ldd	r24, Y+41	; 0x29
    1576:	9a a5       	ldd	r25, Y+42	; 0x2a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <HLCD_voidLcdInit+0x1c0>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	8f 8f       	std	Y+31, r24	; 0x1f
    15a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a4:	98 a1       	ldd	r25, Y+32	; 0x20
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <HLCD_voidLcdInit+0x1ae>
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <HLCD_voidLcdInit+0x1a2>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <HLCD_voidLcdInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6b a1       	ldd	r22, Y+35	; 0x23
    15c4:	7c a1       	ldd	r23, Y+36	; 0x24
    15c6:	8d a1       	ldd	r24, Y+37	; 0x25
    15c8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9a a3       	std	Y+34, r25	; 0x22
    15d4:	89 a3       	std	Y+33, r24	; 0x21
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	8d 8f       	std	Y+29, r24	; 0x1d
    15de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <HLCD_voidLcdInit+0x1ea>
    15e6:	9e 8f       	std	Y+30, r25	; 0x1e
    15e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	HLCD_voidSendCommand(LCD_DisplayControl) ;
    15ea:	8d e0       	ldi	r24, 0x0D	; 13
    15ec:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e8       	ldi	r26, 0x80	; 128
    15f6:	bf e3       	ldi	r27, 0x3F	; 63
    15f8:	89 8f       	std	Y+25, r24	; 0x19
    15fa:	9a 8f       	std	Y+26, r25	; 0x1a
    15fc:	ab 8f       	std	Y+27, r26	; 0x1b
    15fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	69 8d       	ldd	r22, Y+25	; 0x19
    1602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8d 8b       	std	Y+21, r24	; 0x15
    161a:	9e 8b       	std	Y+22, r25	; 0x16
    161c:	af 8b       	std	Y+23, r26	; 0x17
    161e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <HLCD_voidLcdInit+0x24a>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9c 8b       	std	Y+20, r25	; 0x14
    163e:	8b 8b       	std	Y+19, r24	; 0x13
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <HLCD_voidLcdInit+0x2c8>
	else if (__tmp > 65535)
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <HLCD_voidLcdInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	69 8d       	ldd	r22, Y+25	; 0x19
    165c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <HLCD_voidLcdInit+0x2aa>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	89 8b       	std	Y+17, r24	; 0x11
    168c:	89 89       	ldd	r24, Y+17	; 0x11
    168e:	9a 89       	ldd	r25, Y+18	; 0x12
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <HLCD_voidLcdInit+0x298>
    1694:	9a 8b       	std	Y+18, r25	; 0x12
    1696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <HLCD_voidLcdInit+0x28c>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <HLCD_voidLcdInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9c 8b       	std	Y+20, r25	; 0x14
    16be:	8b 8b       	std	Y+19, r24	; 0x13
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	98 8b       	std	Y+16, r25	; 0x10
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <HLCD_voidLcdInit+0x2d4>
    16d0:	98 8b       	std	Y+16, r25	; 0x10
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	HLCD_voidSendCommand(LCD_DisplayClear) ;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e4       	ldi	r27, 0x40	; 64
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	9c 87       	std	Y+12, r25	; 0x0c
    16e6:	ad 87       	std	Y+13, r26	; 0x0d
    16e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f 83       	std	Y+7, r24	; 0x07
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	a9 87       	std	Y+9, r26	; 0x09
    1708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <HLCD_voidLcdInit+0x334>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <HLCD_voidLcdInit+0x3b2>
	else if (__tmp > 65535)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <HLCD_voidLcdInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	0f c0       	rjmp	.+30     	; 0x178c <HLCD_voidLcdInit+0x394>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <HLCD_voidLcdInit+0x382>
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <HLCD_voidLcdInit+0x376>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <HLCD_voidLcdInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <HLCD_voidLcdInit+0x3be>
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
	HLCD_voidSendCommand(LCD_EntryMode) ;
    17be:	86 e0       	ldi	r24, 0x06	; 6
    17c0:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    17c4:	e8 96       	adiw	r28, 0x38	; 56
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <HLCD_voidLCDClr>:

void HLCD_voidLCDClr()
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	2e 97       	sbiw	r28, 0x0e	; 14
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_DisplayClear) ;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e4       	ldi	r27, 0x40	; 64
    17f8:	8b 87       	std	Y+11, r24	; 0x0b
    17fa:	9c 87       	std	Y+12, r25	; 0x0c
    17fc:	ad 87       	std	Y+13, r26	; 0x0d
    17fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	6b 85       	ldd	r22, Y+11	; 0x0b
    1802:	7c 85       	ldd	r23, Y+12	; 0x0c
    1804:	8d 85       	ldd	r24, Y+13	; 0x0d
    1806:	9e 85       	ldd	r25, Y+14	; 0x0e
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8f 83       	std	Y+7, r24	; 0x07
    181a:	98 87       	std	Y+8, r25	; 0x08
    181c:	a9 87       	std	Y+9, r26	; 0x09
    181e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <HLCD_voidLCDClr+0x6c>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <HLCD_voidLCDClr+0xea>
	else if (__tmp > 65535)
    1842:	6f 81       	ldd	r22, Y+7	; 0x07
    1844:	78 85       	ldd	r23, Y+8	; 0x08
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <HLCD_voidLCDClr+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	6b 85       	ldd	r22, Y+11	; 0x0b
    185c:	7c 85       	ldd	r23, Y+12	; 0x0c
    185e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1860:	9e 85       	ldd	r25, Y+14	; 0x0e
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <HLCD_voidLCDClr+0xcc>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <HLCD_voidLCDClr+0xba>
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <HLCD_voidLCDClr+0xae>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <HLCD_voidLCDClr+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <HLCD_voidLCDClr+0xf6>
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    18d4:	2e 96       	adiw	r28, 0x0e	; 14
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <HLCD_voidSetCursor>:

void HLCD_voidSetCursor(u8 A_u8RowID , u8 A_u8ColIndex)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <HLCD_voidSetCursor+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <HLCD_voidSetCursor+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8RowID)
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3c 83       	std	Y+4, r19	; 0x04
    18fe:	2b 83       	std	Y+3, r18	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	91 05       	cpc	r25, r1
    1908:	31 f0       	breq	.+12     	; 0x1916 <HLCD_voidSetCursor+0x30>
    190a:	2b 81       	ldd	r18, Y+3	; 0x03
    190c:	3c 81       	ldd	r19, Y+4	; 0x04
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	31 f0       	breq	.+12     	; 0x1920 <HLCD_voidSetCursor+0x3a>
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <HLCD_voidSetCursor+0x42>
	{
		case LCD_Line1 : HLCD_voidSendCommand(LCD_Row1_ID + A_u8ColIndex) ; break ;
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	81 58       	subi	r24, 0x81	; 129
    191a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <HLCD_voidSetCursor+0x42>
		case LCD_Line2 : HLCD_voidSendCommand(LCD_Row2_ID + A_u8ColIndex) ; break ;
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	81 54       	subi	r24, 0x41	; 65
    1924:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
	}

}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <HLCD_voidSendStr>:

void HLCD_voidSendStr(u8 *PtrStr)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	61 97       	sbiw	r28, 0x11	; 17
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	99 8b       	std	Y+17, r25	; 0x11
    194c:	88 8b       	std	Y+16, r24	; 0x10
	u8 L_u8Counter=0 ;
    194e:	1f 86       	std	Y+15, r1	; 0x0f
    1950:	86 c0       	rjmp	.+268    	; 0x1a5e <HLCD_voidSendStr+0x128>
	while(*PtrStr >0)
		{
			L_u8Counter++ ;
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	8f 87       	std	Y+15, r24	; 0x0f
			HLCD_voidSendData(*PtrStr ++) ;
    1958:	e8 89       	ldd	r30, Y+16	; 0x10
    195a:	f9 89       	ldd	r31, Y+17	; 0x11
    195c:	20 81       	ld	r18, Z
    195e:	88 89       	ldd	r24, Y+16	; 0x10
    1960:	99 89       	ldd	r25, Y+17	; 0x11
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	99 8b       	std	Y+17, r25	; 0x11
    1966:	88 8b       	std	Y+16, r24	; 0x10
    1968:	82 2f       	mov	r24, r18
    196a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a8 e4       	ldi	r26, 0x48	; 72
    1974:	b2 e4       	ldi	r27, 0x42	; 66
    1976:	8b 87       	std	Y+11, r24	; 0x0b
    1978:	9c 87       	std	Y+12, r25	; 0x0c
    197a:	ad 87       	std	Y+13, r26	; 0x0d
    197c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1980:	7c 85       	ldd	r23, Y+12	; 0x0c
    1982:	8d 85       	ldd	r24, Y+13	; 0x0d
    1984:	9e 85       	ldd	r25, Y+14	; 0x0e
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8f 83       	std	Y+7, r24	; 0x07
    1998:	98 87       	std	Y+8, r25	; 0x08
    199a:	a9 87       	std	Y+9, r26	; 0x09
    199c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <HLCD_voidSendStr+0x8a>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <HLCD_voidSendStr+0x108>
	else if (__tmp > 65535)
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <HLCD_voidSendStr+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <HLCD_voidSendStr+0xea>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HLCD_voidSendStr+0xd8>
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <HLCD_voidSendStr+0xcc>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <HLCD_voidSendStr+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <HLCD_voidSendStr+0x114>
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50) ;
			if(L_u8Counter == 16)
    1a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a54:	80 31       	cpi	r24, 0x10	; 16
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <HLCD_voidSendStr+0x128>
			{
				HLCD_voidSendCommand(LCD_EntryModeShift)  ;
    1a58:	87 e0       	ldi	r24, 0x07	; 7
    1a5a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}

void HLCD_voidSendStr(u8 *PtrStr)
{
	u8 L_u8Counter=0 ;
	while(*PtrStr >0)
    1a5e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a60:	f9 89       	ldd	r31, Y+17	; 0x11
    1a62:	80 81       	ld	r24, Z
    1a64:	88 23       	and	r24, r24
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <HLCD_voidSendStr+0x134>
    1a68:	74 cf       	rjmp	.-280    	; 0x1952 <HLCD_voidSendStr+0x1c>
			if(L_u8Counter == 16)
			{
				HLCD_voidSendCommand(LCD_EntryModeShift)  ;
			}
		}
	HLCD_voidSendCommand(LCD_EntryMode)  ;
    1a6a:	86 e0       	ldi	r24, 0x06	; 6
    1a6c:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    1a70:	61 96       	adiw	r28, 0x11	; 17
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <HLCD_voidDisplayNum>:

void HLCD_voidDisplayNum(s32 A_s32Num)
{
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	28 97       	sbiw	r28, 0x08	; 8
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	6d 83       	std	Y+5, r22	; 0x05
    1aa0:	7e 83       	std	Y+6, r23	; 0x06
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
    1aa4:	98 87       	std	Y+8, r25	; 0x08
	s32 L_u32Store = 1 ;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	ab 83       	std	Y+3, r26	; 0x03
    1ab4:	bc 83       	std	Y+4, r27	; 0x04
	if(A_s32Num == 0)
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	af 81       	ldd	r26, Y+7	; 0x07
    1abc:	b8 85       	ldd	r27, Y+8	; 0x08
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	a1 05       	cpc	r26, r1
    1ac2:	b1 05       	cpc	r27, r1
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <HLCD_voidDisplayNum+0x4a>
	{
		HLCD_voidSendData('0') ;
    1ac6:	80 e3       	ldi	r24, 0x30	; 48
    1ac8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
	}
	if(A_s32Num < 0)
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	af 81       	ldd	r26, Y+7	; 0x07
    1ad2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ad4:	bb 23       	and	r27, r27
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <HLCD_voidDisplayNum+0x58>
    1ad8:	49 c0       	rjmp	.+146    	; 0x1b6c <HLCD_voidDisplayNum+0xea>
	{

		HLCD_voidSendData('-') ;
    1ada:	8d e2       	ldi	r24, 0x2D	; 45
    1adc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		A_s32Num = A_s32Num * -1 ;
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	af 81       	ldd	r26, Y+7	; 0x07
    1ae6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ae8:	b0 95       	com	r27
    1aea:	a0 95       	com	r26
    1aec:	90 95       	com	r25
    1aee:	81 95       	neg	r24
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	af 4f       	sbci	r26, 0xFF	; 255
    1af4:	bf 4f       	sbci	r27, 0xFF	; 255
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	af 83       	std	Y+7, r26	; 0x07
    1afc:	b8 87       	std	Y+8, r27	; 0x08
    1afe:	36 c0       	rjmp	.+108    	; 0x1b6c <HLCD_voidDisplayNum+0xea>
	}
	while(A_s32Num != 0)
	{
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	ab 81       	ldd	r26, Y+3	; 0x03
    1b06:	bc 81       	ldd	r27, Y+4	; 0x04
    1b08:	2a e0       	ldi	r18, 0x0A	; 10
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    1b18:	7b 01       	movw	r14, r22
    1b1a:	8c 01       	movw	r16, r24
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	af 81       	ldd	r26, Y+7	; 0x07
    1b22:	b8 85       	ldd	r27, Y+8	; 0x08
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8e 0d       	add	r24, r14
    1b3a:	9f 1d       	adc	r25, r15
    1b3c:	a0 1f       	adc	r26, r16
    1b3e:	b1 1f       	adc	r27, r17
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	ab 83       	std	Y+3, r26	; 0x03
    1b46:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Num = A_s32Num/10 ;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	af 81       	ldd	r26, Y+7	; 0x07
    1b4e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    1b60:	da 01       	movw	r26, r20
    1b62:	c9 01       	movw	r24, r18
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	af 83       	std	Y+7, r26	; 0x07
    1b6a:	b8 87       	std	Y+8, r27	; 0x08
	{

		HLCD_voidSendData('-') ;
		A_s32Num = A_s32Num * -1 ;
	}
	while(A_s32Num != 0)
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	af 81       	ldd	r26, Y+7	; 0x07
    1b72:	b8 85       	ldd	r27, Y+8	; 0x08
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	a1 05       	cpc	r26, r1
    1b78:	b1 05       	cpc	r27, r1
    1b7a:	11 f6       	brne	.-124    	; 0x1b00 <HLCD_voidDisplayNum+0x7e>
    1b7c:	23 c0       	rjmp	.+70     	; 0x1bc4 <HLCD_voidDisplayNum+0x142>
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
		A_s32Num = A_s32Num/10 ;
	}
	while(L_u32Store != 1)
	{
		HLCD_voidSendData((L_u32Store%10) + 48) ;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	ab 81       	ldd	r26, Y+3	; 0x03
    1b84:	bc 81       	ldd	r27, Y+4	; 0x04
    1b86:	2a e0       	ldi	r18, 0x0A	; 10
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	80 5d       	subi	r24, 0xD0	; 208
    1b9c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		L_u32Store = L_u32Store/10 ;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ba6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ba8:	2a e0       	ldi	r18, 0x0A	; 10
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    1bb8:	da 01       	movw	r26, r20
    1bba:	c9 01       	movw	r24, r18
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	ab 83       	std	Y+3, r26	; 0x03
    1bc2:	bc 83       	std	Y+4, r27	; 0x04
	while(A_s32Num != 0)
	{
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
		A_s32Num = A_s32Num/10 ;
	}
	while(L_u32Store != 1)
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	ab 81       	ldd	r26, Y+3	; 0x03
    1bca:	bc 81       	ldd	r27, Y+4	; 0x04
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	91 05       	cpc	r25, r1
    1bd0:	a1 05       	cpc	r26, r1
    1bd2:	b1 05       	cpc	r27, r1
    1bd4:	a1 f6       	brne	.-88     	; 0x1b7e <HLCD_voidDisplayNum+0xfc>
	{
		HLCD_voidSendData((L_u32Store%10) + 48) ;
		L_u32Store = L_u32Store/10 ;
	}
}
    1bd6:	28 96       	adiw	r28, 0x08	; 8
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	08 95       	ret

00001bf0 <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex , u8 *A_u8Char)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <HLCD_voidSaveCustomChar+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <HLCD_voidSaveCustomChar+0x8>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	7c 83       	std	Y+4, r23	; 0x04
    1c00:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_voidSendCommand(0x40+(A_u8CGRAMIndex*8)) ;
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	08 96       	adiw	r24, 0x08	; 8
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
	for(u8 L_u8Location = 0 ; L_u8Location < 8 ; L_u8Location++)
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <HLCD_voidSaveCustomChar+0x4a>
	{
	HLCD_voidSendData(A_u8Char[L_u8Location]) ;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	fc 01       	movw	r30, r24
    1c2a:	e2 0f       	add	r30, r18
    1c2c:	f3 1f       	adc	r31, r19
    1c2e:	80 81       	ld	r24, Z
    1c30:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
}

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex , u8 *A_u8Char)
{
	HLCD_voidSendCommand(0x40+(A_u8CGRAMIndex*8)) ;
	for(u8 L_u8Location = 0 ; L_u8Location < 8 ; L_u8Location++)
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 30       	cpi	r24, 0x08	; 8
    1c3e:	78 f3       	brcs	.-34     	; 0x1c1e <HLCD_voidSaveCustomChar+0x2e>
	{
	HLCD_voidSendData(A_u8Char[L_u8Location]) ;
	}
	HLCD_voidSendCommand(0x80) ;
    1c40:	80 e8       	ldi	r24, 0x80	; 128
    1c42:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAMIndex <8)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	18 f4       	brcc	.+6      	; 0x1c6c <HLCD_voidDisplayCustomChar+0x18>
	{
	HLCD_voidSendData(A_u8CGRAMIndex) ;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
	}
}
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <HLCD_voidRtrnHome>:

void HLCD_voidRtrnHome()
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_RtrnHome) ;
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e4       	ldi	r27, 0x40	; 64
    1c96:	8b 87       	std	Y+11, r24	; 0x0b
    1c98:	9c 87       	std	Y+12, r25	; 0x0c
    1c9a:	ad 87       	std	Y+13, r26	; 0x0d
    1c9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8f 83       	std	Y+7, r24	; 0x07
    1cb8:	98 87       	std	Y+8, r25	; 0x08
    1cba:	a9 87       	std	Y+9, r26	; 0x09
    1cbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <HLCD_voidRtrnHome+0x6c>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <HLCD_voidRtrnHome+0xea>
	else if (__tmp > 65535)
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <HLCD_voidRtrnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <HLCD_voidRtrnHome+0xcc>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <HLCD_voidRtrnHome+0xba>
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <HLCD_voidRtrnHome+0xae>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <HLCD_voidRtrnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <HLCD_voidRtrnHome+0xf6>
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    1d72:	2e 96       	adiw	r28, 0x0e	; 14
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <HKPD_voidKeyPadInit>:
								 { 1 , 2 , 3 , '-'} ,
								 {'C', 0 ,'=', '+'}
};

void HKPD_voidKeyPadInit()
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidPortMode(KPD_Port , 0x0f) ;
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	6f e0       	ldi	r22, 0x0F	; 15
    1d90:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
	MDIO_voidPortValue(KPD_Port , 0xff);
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <HKPD_u8GetPressedKey>:

u8 HKPD_u8GetPressedKey()
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	62 97       	sbiw	r28, 0x12	; 18
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8PressedKey ;
	u8 L_u8Stop=1 ;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	89 8b       	std	Y+17, r24	; 0x11
    1dba:	b5 c0       	rjmp	.+362    	; 0x1f26 <HKPD_u8GetPressedKey+0x184>
	while(L_u8Stop)
	{
	for(u8 col = 0 ; col < KPD_Col ; col++)
    1dbc:	18 8a       	std	Y+16, r1	; 0x10
    1dbe:	af c0       	rjmp	.+350    	; 0x1f1e <HKPD_u8GetPressedKey+0x17c>
	{
		MDIO_voidPinValue(KPD_Port , col , LOW) ;
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	68 89       	ldd	r22, Y+16	; 0x10
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
		for(u8 row = 0 ; row < KPD_Row ; row++)
    1dca:	1f 86       	std	Y+15, r1	; 0x0f
    1dcc:	9c c0       	rjmp	.+312    	; 0x1f06 <HKPD_u8GetPressedKey+0x164>
		{
			if(MDIO_u8PinRead(KPD_Port , row+4) == 0)
    1dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	9c 5f       	subi	r25, 0xFC	; 252
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <HKPD_u8GetPressedKey+0x40>
    1de0:	8f c0       	rjmp	.+286    	; 0x1f00 <HKPD_u8GetPressedKey+0x15e>
			{
				while(MDIO_u8PinRead(KPD_Port , row+4) == 0){}
    1de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de4:	98 2f       	mov	r25, r24
    1de6:	9c 5f       	subi	r25, 0xFC	; 252
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	69 2f       	mov	r22, r25
    1dec:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    1df0:	88 23       	and	r24, r24
    1df2:	b9 f3       	breq	.-18     	; 0x1de2 <HKPD_u8GetPressedKey+0x40>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dfa:	b1 e4       	ldi	r27, 0x41	; 65
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <HKPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <HKPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <HKPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <HKPD_u8GetPressedKey+0x104>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <HKPD_u8GetPressedKey+0xf2>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <HKPD_u8GetPressedKey+0xe6>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <HKPD_u8GetPressedKey+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <HKPD_u8GetPressedKey+0x12e>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20) ;
				L_u8PressedKey = KPD_Matrix[row][col] ;
    1ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eda:	48 2f       	mov	r20, r24
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	88 89       	ldd	r24, Y+16	; 0x10
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e0 57       	subi	r30, 0x70	; 112
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	8a 8b       	std	Y+18, r24	; 0x12
				L_u8Stop = 0 ;
    1efc:	19 8a       	std	Y+17, r1	; 0x11
    1efe:	07 c0       	rjmp	.+14     	; 0x1f0e <HKPD_u8GetPressedKey+0x16c>
	while(L_u8Stop)
	{
	for(u8 col = 0 ; col < KPD_Col ; col++)
	{
		MDIO_voidPinValue(KPD_Port , col , LOW) ;
		for(u8 row = 0 ; row < KPD_Row ; row++)
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <HKPD_u8GetPressedKey+0x16c>
    1f0c:	60 cf       	rjmp	.-320    	; 0x1dce <HKPD_u8GetPressedKey+0x2c>
				L_u8PressedKey = KPD_Matrix[row][col] ;
				L_u8Stop = 0 ;
				break ;
			}
		}
	MDIO_voidPinValue(KPD_Port , col , HIGH) ;
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	68 89       	ldd	r22, Y+16	; 0x10
    1f12:	4f ef       	ldi	r20, 0xFF	; 255
    1f14:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
{
	u8 L_u8PressedKey ;
	u8 L_u8Stop=1 ;
	while(L_u8Stop)
	{
	for(u8 col = 0 ; col < KPD_Col ; col++)
    1f18:	88 89       	ldd	r24, Y+16	; 0x10
    1f1a:	8f 5f       	subi	r24, 0xFF	; 255
    1f1c:	88 8b       	std	Y+16, r24	; 0x10
    1f1e:	88 89       	ldd	r24, Y+16	; 0x10
    1f20:	84 30       	cpi	r24, 0x04	; 4
    1f22:	08 f4       	brcc	.+2      	; 0x1f26 <HKPD_u8GetPressedKey+0x184>
    1f24:	4d cf       	rjmp	.-358    	; 0x1dc0 <HKPD_u8GetPressedKey+0x1e>

u8 HKPD_u8GetPressedKey()
{
	u8 L_u8PressedKey ;
	u8 L_u8Stop=1 ;
	while(L_u8Stop)
    1f26:	89 89       	ldd	r24, Y+17	; 0x11
    1f28:	88 23       	and	r24, r24
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <HKPD_u8GetPressedKey+0x18c>
    1f2c:	47 cf       	rjmp	.-370    	; 0x1dbc <HKPD_u8GetPressedKey+0x1a>
			}
		}
	MDIO_voidPinValue(KPD_Port , col , HIGH) ;
	}
	}
return L_u8PressedKey ; }
    1f2e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f30:	62 96       	adiw	r28, 0x12	; 18
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <main>:
#include "../HAL/LCD/LCD.h"
#include "../HAL/KeyPad/KPD.h"
#include <util/delay.h>

void main()
{
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	e9 97       	sbiw	r28, 0x39	; 57
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidLcdInit() ;
    1f5e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <HLCD_voidLcdInit>
	HKPD_voidKeyPadInit() ;
    1f62:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <HKPD_voidKeyPadInit>
	u8  G_PrssdKy = 0 ;
    1f66:	19 ae       	std	Y+57, r1	; 0x39
	u8  G_Sign = '+' ;
    1f68:	8b e2       	ldi	r24, 0x2B	; 43
    1f6a:	88 af       	std	Y+56, r24	; 0x38
	u8  G_Oprtion ;
	s32 G_Operand1 = 0 ;
    1f6c:	1b aa       	std	Y+51, r1	; 0x33
    1f6e:	1c aa       	std	Y+52, r1	; 0x34
    1f70:	1d aa       	std	Y+53, r1	; 0x35
    1f72:	1e aa       	std	Y+54, r1	; 0x36
	s32 G_Operand2 = 0 ;
    1f74:	1f a6       	std	Y+47, r1	; 0x2f
    1f76:	18 aa       	std	Y+48, r1	; 0x30
    1f78:	19 aa       	std	Y+49, r1	; 0x31
    1f7a:	1a aa       	std	Y+50, r1	; 0x32
	s32 G_Result = 0 ;
    1f7c:	1b a6       	std	Y+43, r1	; 0x2b
    1f7e:	1c a6       	std	Y+44, r1	; 0x2c
    1f80:	1d a6       	std	Y+45, r1	; 0x2d
    1f82:	1e a6       	std	Y+46, r1	; 0x2e
	//welcome statement
	HLCD_voidSendStr("Welcome to my calculator ^_^");
    1f84:	80 e6       	ldi	r24, 0x60	; 96
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 9b 0c 	call	0x1936	; 0x1936 <HLCD_voidSendStr>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	aa ef       	ldi	r26, 0xFA	; 250
    1f92:	b3 e4       	ldi	r27, 0x43	; 67
    1f94:	8f a3       	std	Y+39, r24	; 0x27
    1f96:	98 a7       	std	Y+40, r25	; 0x28
    1f98:	a9 a7       	std	Y+41, r26	; 0x29
    1f9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a ef       	ldi	r20, 0xFA	; 250
    1faa:	54 e4       	ldi	r21, 0x44	; 68
    1fac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8b a3       	std	Y+35, r24	; 0x23
    1fb6:	9c a3       	std	Y+36, r25	; 0x24
    1fb8:	ad a3       	std	Y+37, r26	; 0x25
    1fba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <main+0x9c>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9a a3       	std	Y+34, r25	; 0x22
    1fda:	89 a3       	std	Y+33, r24	; 0x21
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <main+0x11a>
	else if (__tmp > 65535)
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff8:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffa:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9a a3       	std	Y+34, r25	; 0x22
    201c:	89 a3       	std	Y+33, r24	; 0x21
    201e:	0f c0       	rjmp	.+30     	; 0x203e <main+0xfc>
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	98 a3       	std	Y+32, r25	; 0x20
    2026:	8f 8f       	std	Y+31, r24	; 0x1f
    2028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    202a:	98 a1       	ldd	r25, Y+32	; 0x20
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0xea>
    2030:	98 a3       	std	Y+32, r25	; 0x20
    2032:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	89 a1       	ldd	r24, Y+33	; 0x21
    2036:	9a a1       	ldd	r25, Y+34	; 0x22
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	89 a1       	ldd	r24, Y+33	; 0x21
    2040:	9a a1       	ldd	r25, Y+34	; 0x22
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <main+0xde>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	9a a1       	ldd	r25, Y+34	; 0x22
    2060:	9e 8f       	std	Y+30, r25	; 0x1e
    2062:	8d 8f       	std	Y+29, r24	; 0x1d
    2064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2066:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <main+0x126>
    206c:	9e 8f       	std	Y+30, r25	; 0x1e
    206e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500) ;
	HLCD_voidLCDClr() ;
    2070:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
while(1)
{
	if((G_PrssdKy != '*') && (G_PrssdKy != '+') && (G_PrssdKy != '-') && (G_PrssdKy != '/'))
    2074:	89 ad       	ldd	r24, Y+57	; 0x39
    2076:	8a 32       	cpi	r24, 0x2A	; 42
    2078:	09 f4       	brne	.+2      	; 0x207c <main+0x13a>
    207a:	19 c2       	rjmp	.+1074   	; 0x24ae <main+0x56c>
    207c:	89 ad       	ldd	r24, Y+57	; 0x39
    207e:	8b 32       	cpi	r24, 0x2B	; 43
    2080:	09 f4       	brne	.+2      	; 0x2084 <main+0x142>
    2082:	15 c2       	rjmp	.+1066   	; 0x24ae <main+0x56c>
    2084:	89 ad       	ldd	r24, Y+57	; 0x39
    2086:	8d 32       	cpi	r24, 0x2D	; 45
    2088:	09 f4       	brne	.+2      	; 0x208c <main+0x14a>
    208a:	11 c2       	rjmp	.+1058   	; 0x24ae <main+0x56c>
    208c:	89 ad       	ldd	r24, Y+57	; 0x39
    208e:	8f 32       	cpi	r24, 0x2F	; 47
    2090:	09 f4       	brne	.+2      	; 0x2094 <main+0x152>
    2092:	0d c2       	rjmp	.+1050   	; 0x24ae <main+0x56c>
	{
		while(1)
		{
		G_Sign = '+'   ;
    2094:	8b e2       	ldi	r24, 0x2B	; 43
    2096:	88 af       	std	Y+56, r24	; 0x38
		G_Operand1 = 0 ;
    2098:	1b aa       	std	Y+51, r1	; 0x33
    209a:	1c aa       	std	Y+52, r1	; 0x34
    209c:	1d aa       	std	Y+53, r1	; 0x35
    209e:	1e aa       	std	Y+54, r1	; 0x36
		G_Operand2 = 0 ;
    20a0:	1f a6       	std	Y+47, r1	; 0x2f
    20a2:	18 aa       	std	Y+48, r1	; 0x30
    20a4:	19 aa       	std	Y+49, r1	; 0x31
    20a6:	1a aa       	std	Y+50, r1	; 0x32


		//enter operand1
		G_Sign = HKPD_u8GetPressedKey() ;
    20a8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    20ac:	88 af       	std	Y+56, r24	; 0x38
		if(G_Sign == '-')
    20ae:	88 ad       	ldd	r24, Y+56	; 0x38
    20b0:	8d 32       	cpi	r24, 0x2D	; 45
    20b2:	39 f4       	brne	.+14     	; 0x20c2 <main+0x180>
		{
			HLCD_voidSendData(G_Sign) ;
    20b4:	88 ad       	ldd	r24, Y+56	; 0x38
    20b6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
			G_PrssdKy = HKPD_u8GetPressedKey() ;
    20ba:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    20be:	89 af       	std	Y+57, r24	; 0x39
    20c0:	33 c0       	rjmp	.+102    	; 0x2128 <main+0x1e6>
		}
		else
		{
			G_PrssdKy = G_Sign ;
    20c2:	88 ad       	ldd	r24, Y+56	; 0x38
    20c4:	89 af       	std	Y+57, r24	; 0x39
    20c6:	30 c0       	rjmp	.+96     	; 0x2128 <main+0x1e6>
		}
		while((G_PrssdKy != '*') && (G_PrssdKy != '+') && (G_PrssdKy != '-') && (G_PrssdKy != '/') && (G_PrssdKy != '='))
		{
			if((G_PrssdKy >= 0) && (G_PrssdKy <= 9))
    20c8:	89 ad       	ldd	r24, Y+57	; 0x39
    20ca:	8a 30       	cpi	r24, 0x0A	; 10
    20cc:	20 f5       	brcc	.+72     	; 0x2116 <main+0x1d4>
			{
				HLCD_voidDisplayNum(G_PrssdKy) ;
    20ce:	89 ad       	ldd	r24, Y+57	; 0x39
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 e0       	ldi	r26, 0x00	; 0
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
				G_Operand1 = G_Operand1*10 + G_PrssdKy ;
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	ad a9       	ldd	r26, Y+53	; 0x35
    20e6:	be a9       	ldd	r27, Y+54	; 0x36
    20e8:	2a e0       	ldi	r18, 0x0A	; 10
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	89 ad       	ldd	r24, Y+57	; 0x39
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	a4 1f       	adc	r26, r20
    210c:	b5 1f       	adc	r27, r21
    210e:	8b ab       	std	Y+51, r24	; 0x33
    2110:	9c ab       	std	Y+52, r25	; 0x34
    2112:	ad ab       	std	Y+53, r26	; 0x35
    2114:	be ab       	std	Y+54, r27	; 0x36
			}
			if(G_PrssdKy == 'C')
    2116:	89 ad       	ldd	r24, Y+57	; 0x39
    2118:	83 34       	cpi	r24, 0x43	; 67
    211a:	19 f4       	brne	.+6      	; 0x2122 <main+0x1e0>
			{
				HLCD_voidLCDClr() ; break ;
    211c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    2120:	12 c0       	rjmp	.+36     	; 0x2146 <main+0x204>
			}
			G_PrssdKy = HKPD_u8GetPressedKey() ;
    2122:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    2126:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			G_PrssdKy = G_Sign ;
		}
		while((G_PrssdKy != '*') && (G_PrssdKy != '+') && (G_PrssdKy != '-') && (G_PrssdKy != '/') && (G_PrssdKy != '='))
    2128:	89 ad       	ldd	r24, Y+57	; 0x39
    212a:	8a 32       	cpi	r24, 0x2A	; 42
    212c:	61 f0       	breq	.+24     	; 0x2146 <main+0x204>
    212e:	89 ad       	ldd	r24, Y+57	; 0x39
    2130:	8b 32       	cpi	r24, 0x2B	; 43
    2132:	49 f0       	breq	.+18     	; 0x2146 <main+0x204>
    2134:	89 ad       	ldd	r24, Y+57	; 0x39
    2136:	8d 32       	cpi	r24, 0x2D	; 45
    2138:	31 f0       	breq	.+12     	; 0x2146 <main+0x204>
    213a:	89 ad       	ldd	r24, Y+57	; 0x39
    213c:	8f 32       	cpi	r24, 0x2F	; 47
    213e:	19 f0       	breq	.+6      	; 0x2146 <main+0x204>
    2140:	89 ad       	ldd	r24, Y+57	; 0x39
    2142:	8d 33       	cpi	r24, 0x3D	; 61
    2144:	09 f6       	brne	.-126    	; 0x20c8 <main+0x186>
				HLCD_voidLCDClr() ; break ;
			}
			G_PrssdKy = HKPD_u8GetPressedKey() ;
		}

		if(G_PrssdKy == 'C')
    2146:	89 ad       	ldd	r24, Y+57	; 0x39
    2148:	83 34       	cpi	r24, 0x43	; 67
    214a:	19 f4       	brne	.+6      	; 0x2152 <main+0x210>
		{
			HLCD_voidLCDClr() ; break ;
    214c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    2150:	91 cf       	rjmp	.-222    	; 0x2074 <main+0x132>
		}

		//change the sign in case of  -ve number
		if(G_Sign == '-')
    2152:	88 ad       	ldd	r24, Y+56	; 0x38
    2154:	8d 32       	cpi	r24, 0x2D	; 45
    2156:	89 f4       	brne	.+34     	; 0x217a <main+0x238>
		{
			G_Operand1*=-1 ;
    2158:	8b a9       	ldd	r24, Y+51	; 0x33
    215a:	9c a9       	ldd	r25, Y+52	; 0x34
    215c:	ad a9       	ldd	r26, Y+53	; 0x35
    215e:	be a9       	ldd	r27, Y+54	; 0x36
    2160:	b0 95       	com	r27
    2162:	a0 95       	com	r26
    2164:	90 95       	com	r25
    2166:	81 95       	neg	r24
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	af 4f       	sbci	r26, 0xFF	; 255
    216c:	bf 4f       	sbci	r27, 0xFF	; 255
    216e:	8b ab       	std	Y+51, r24	; 0x33
    2170:	9c ab       	std	Y+52, r25	; 0x34
    2172:	ad ab       	std	Y+53, r26	; 0x35
    2174:	be ab       	std	Y+54, r27	; 0x36
			G_Sign = '+';
    2176:	8b e2       	ldi	r24, 0x2B	; 43
    2178:	88 af       	std	Y+56, r24	; 0x38
		}

		//select operation
		if((G_PrssdKy == '*') || (G_PrssdKy == '+') || (G_PrssdKy == '-') || (G_PrssdKy == '/') || (G_PrssdKy == '='))
    217a:	89 ad       	ldd	r24, Y+57	; 0x39
    217c:	8a 32       	cpi	r24, 0x2A	; 42
    217e:	61 f0       	breq	.+24     	; 0x2198 <main+0x256>
    2180:	89 ad       	ldd	r24, Y+57	; 0x39
    2182:	8b 32       	cpi	r24, 0x2B	; 43
    2184:	49 f0       	breq	.+18     	; 0x2198 <main+0x256>
    2186:	89 ad       	ldd	r24, Y+57	; 0x39
    2188:	8d 32       	cpi	r24, 0x2D	; 45
    218a:	31 f0       	breq	.+12     	; 0x2198 <main+0x256>
    218c:	89 ad       	ldd	r24, Y+57	; 0x39
    218e:	8f 32       	cpi	r24, 0x2F	; 47
    2190:	19 f0       	breq	.+6      	; 0x2198 <main+0x256>
    2192:	89 ad       	ldd	r24, Y+57	; 0x39
    2194:	8d 33       	cpi	r24, 0x3D	; 61
    2196:	71 f4       	brne	.+28     	; 0x21b4 <main+0x272>
		{
			HLCD_voidSendData(' ') ;
    2198:	80 e2       	ldi	r24, 0x20	; 32
    219a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
			if(G_PrssdKy != '=')
    219e:	89 ad       	ldd	r24, Y+57	; 0x39
    21a0:	8d 33       	cpi	r24, 0x3D	; 61
    21a2:	19 f0       	breq	.+6      	; 0x21aa <main+0x268>
			{
			HLCD_voidSendData(G_PrssdKy) ;
    21a4:	89 ad       	ldd	r24, Y+57	; 0x39
    21a6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
			}
			G_Oprtion = G_PrssdKy ;
    21aa:	89 ad       	ldd	r24, Y+57	; 0x39
    21ac:	8f ab       	std	Y+55, r24	; 0x37
			HLCD_voidSendData(' ') ;
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		}

		//operand2
		if(G_PrssdKy != '=')
    21b4:	89 ad       	ldd	r24, Y+57	; 0x39
    21b6:	8d 33       	cpi	r24, 0x3D	; 61
    21b8:	09 f4       	brne	.+2      	; 0x21bc <main+0x27a>
    21ba:	5b c0       	rjmp	.+182    	; 0x2272 <main+0x330>
		{
			G_Sign = HKPD_u8GetPressedKey() ;
    21bc:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    21c0:	88 af       	std	Y+56, r24	; 0x38
			if(G_Sign == '-')
    21c2:	88 ad       	ldd	r24, Y+56	; 0x38
    21c4:	8d 32       	cpi	r24, 0x2D	; 45
    21c6:	39 f4       	brne	.+14     	; 0x21d6 <main+0x294>
			{
				HLCD_voidSendData(G_Sign) ;
    21c8:	88 ad       	ldd	r24, Y+56	; 0x38
    21ca:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
				G_PrssdKy = HKPD_u8GetPressedKey() ;
    21ce:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    21d2:	89 af       	std	Y+57, r24	; 0x39
    21d4:	33 c0       	rjmp	.+102    	; 0x223c <main+0x2fa>
			}
			else
			{
				G_PrssdKy = G_Sign ;
    21d6:	88 ad       	ldd	r24, Y+56	; 0x38
    21d8:	89 af       	std	Y+57, r24	; 0x39
    21da:	30 c0       	rjmp	.+96     	; 0x223c <main+0x2fa>
			}
			while(G_PrssdKy != '=')
			{
				if((G_PrssdKy >= 0) && (G_PrssdKy <= 9))
    21dc:	89 ad       	ldd	r24, Y+57	; 0x39
    21de:	8a 30       	cpi	r24, 0x0A	; 10
    21e0:	20 f5       	brcc	.+72     	; 0x222a <main+0x2e8>
				{
					HLCD_voidDisplayNum(G_PrssdKy) ;
    21e2:	89 ad       	ldd	r24, Y+57	; 0x39
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e0       	ldi	r26, 0x00	; 0
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
					G_Operand2 = G_Operand2*10 + G_PrssdKy ;
    21f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f6:	98 a9       	ldd	r25, Y+48	; 0x30
    21f8:	a9 a9       	ldd	r26, Y+49	; 0x31
    21fa:	ba a9       	ldd	r27, Y+50	; 0x32
    21fc:	2a e0       	ldi	r18, 0x0A	; 10
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    220c:	9b 01       	movw	r18, r22
    220e:	ac 01       	movw	r20, r24
    2210:	89 ad       	ldd	r24, Y+57	; 0x39
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	a4 1f       	adc	r26, r20
    2220:	b5 1f       	adc	r27, r21
    2222:	8f a7       	std	Y+47, r24	; 0x2f
    2224:	98 ab       	std	Y+48, r25	; 0x30
    2226:	a9 ab       	std	Y+49, r26	; 0x31
    2228:	ba ab       	std	Y+50, r27	; 0x32
				}
				if(G_PrssdKy == 'C')
    222a:	89 ad       	ldd	r24, Y+57	; 0x39
    222c:	83 34       	cpi	r24, 0x43	; 67
    222e:	19 f4       	brne	.+6      	; 0x2236 <main+0x2f4>
				{
					HLCD_voidLCDClr() ; break ;
    2230:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <main+0x300>
				}
				G_PrssdKy = HKPD_u8GetPressedKey() ;
    2236:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    223a:	89 af       	std	Y+57, r24	; 0x39
			}
			else
			{
				G_PrssdKy = G_Sign ;
			}
			while(G_PrssdKy != '=')
    223c:	89 ad       	ldd	r24, Y+57	; 0x39
    223e:	8d 33       	cpi	r24, 0x3D	; 61
    2240:	69 f6       	brne	.-102    	; 0x21dc <main+0x29a>
				{
					HLCD_voidLCDClr() ; break ;
				}
				G_PrssdKy = HKPD_u8GetPressedKey() ;
			}
			if(G_PrssdKy == 'C')
    2242:	89 ad       	ldd	r24, Y+57	; 0x39
    2244:	83 34       	cpi	r24, 0x43	; 67
    2246:	19 f4       	brne	.+6      	; 0x224e <main+0x30c>
			{
				HLCD_voidLCDClr() ; break ;
    2248:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    224c:	13 cf       	rjmp	.-474    	; 0x2074 <main+0x132>
			}

			//change the sign in case of  -ve number
			if(G_Sign == '-')
    224e:	88 ad       	ldd	r24, Y+56	; 0x38
    2250:	8d 32       	cpi	r24, 0x2D	; 45
    2252:	79 f4       	brne	.+30     	; 0x2272 <main+0x330>
			{
				G_Operand2*=-1 ;
    2254:	8f a5       	ldd	r24, Y+47	; 0x2f
    2256:	98 a9       	ldd	r25, Y+48	; 0x30
    2258:	a9 a9       	ldd	r26, Y+49	; 0x31
    225a:	ba a9       	ldd	r27, Y+50	; 0x32
    225c:	b0 95       	com	r27
    225e:	a0 95       	com	r26
    2260:	90 95       	com	r25
    2262:	81 95       	neg	r24
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	af 4f       	sbci	r26, 0xFF	; 255
    2268:	bf 4f       	sbci	r27, 0xFF	; 255
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	98 ab       	std	Y+48, r25	; 0x30
    226e:	a9 ab       	std	Y+49, r26	; 0x31
    2270:	ba ab       	std	Y+50, r27	; 0x32
			}
		}

		HLCD_voidSetCursor(2,1) ;
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <HLCD_voidSetCursor>
		HLCD_voidSendData('=') ;
    227a:	8d e3       	ldi	r24, 0x3D	; 61
    227c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		HLCD_voidSendData(' ') ;
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		//operation
		if(G_Oprtion == '+')
    2286:	8f a9       	ldd	r24, Y+55	; 0x37
    2288:	8b 32       	cpi	r24, 0x2B	; 43
    228a:	c9 f4       	brne	.+50     	; 0x22be <main+0x37c>
		{
			G_Result = G_Operand1 + G_Operand2 ;
    228c:	2b a9       	ldd	r18, Y+51	; 0x33
    228e:	3c a9       	ldd	r19, Y+52	; 0x34
    2290:	4d a9       	ldd	r20, Y+53	; 0x35
    2292:	5e a9       	ldd	r21, Y+54	; 0x36
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	a9 a9       	ldd	r26, Y+49	; 0x31
    229a:	ba a9       	ldd	r27, Y+50	; 0x32
    229c:	82 0f       	add	r24, r18
    229e:	93 1f       	adc	r25, r19
    22a0:	a4 1f       	adc	r26, r20
    22a2:	b5 1f       	adc	r27, r21
    22a4:	8b a7       	std	Y+43, r24	; 0x2b
    22a6:	9c a7       	std	Y+44, r25	; 0x2c
    22a8:	ad a7       	std	Y+45, r26	; 0x2d
    22aa:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    22ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b0:	ad a5       	ldd	r26, Y+45	; 0x2d
    22b2:	be a5       	ldd	r27, Y+46	; 0x2e
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    22bc:	f2 c0       	rjmp	.+484    	; 0x24a2 <main+0x560>
		}
		else if (G_Oprtion == '-')
    22be:	8f a9       	ldd	r24, Y+55	; 0x37
    22c0:	8d 32       	cpi	r24, 0x2D	; 45
    22c2:	e9 f4       	brne	.+58     	; 0x22fe <main+0x3bc>
		{
			G_Result = G_Operand1 - G_Operand2 ;
    22c4:	2b a9       	ldd	r18, Y+51	; 0x33
    22c6:	3c a9       	ldd	r19, Y+52	; 0x34
    22c8:	4d a9       	ldd	r20, Y+53	; 0x35
    22ca:	5e a9       	ldd	r21, Y+54	; 0x36
    22cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ce:	98 a9       	ldd	r25, Y+48	; 0x30
    22d0:	a9 a9       	ldd	r26, Y+49	; 0x31
    22d2:	ba a9       	ldd	r27, Y+50	; 0x32
    22d4:	79 01       	movw	r14, r18
    22d6:	8a 01       	movw	r16, r20
    22d8:	e8 1a       	sub	r14, r24
    22da:	f9 0a       	sbc	r15, r25
    22dc:	0a 0b       	sbc	r16, r26
    22de:	1b 0b       	sbc	r17, r27
    22e0:	d8 01       	movw	r26, r16
    22e2:	c7 01       	movw	r24, r14
    22e4:	8b a7       	std	Y+43, r24	; 0x2b
    22e6:	9c a7       	std	Y+44, r25	; 0x2c
    22e8:	ad a7       	std	Y+45, r26	; 0x2d
    22ea:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    22ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f0:	ad a5       	ldd	r26, Y+45	; 0x2d
    22f2:	be a5       	ldd	r27, Y+46	; 0x2e
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    22fc:	d2 c0       	rjmp	.+420    	; 0x24a2 <main+0x560>
		}
		else if (G_Oprtion == '*')
    22fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2300:	8a 32       	cpi	r24, 0x2A	; 42
    2302:	d9 f4       	brne	.+54     	; 0x233a <main+0x3f8>
		{
			G_Result = G_Operand1 * G_Operand2 ;
    2304:	8b a9       	ldd	r24, Y+51	; 0x33
    2306:	9c a9       	ldd	r25, Y+52	; 0x34
    2308:	ad a9       	ldd	r26, Y+53	; 0x35
    230a:	be a9       	ldd	r27, Y+54	; 0x36
    230c:	2f a5       	ldd	r18, Y+47	; 0x2f
    230e:	38 a9       	ldd	r19, Y+48	; 0x30
    2310:	49 a9       	ldd	r20, Y+49	; 0x31
    2312:	5a a9       	ldd	r21, Y+50	; 0x32
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8b a7       	std	Y+43, r24	; 0x2b
    2322:	9c a7       	std	Y+44, r25	; 0x2c
    2324:	ad a7       	std	Y+45, r26	; 0x2d
    2326:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    2328:	8b a5       	ldd	r24, Y+43	; 0x2b
    232a:	9c a5       	ldd	r25, Y+44	; 0x2c
    232c:	ad a5       	ldd	r26, Y+45	; 0x2d
    232e:	be a5       	ldd	r27, Y+46	; 0x2e
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    2338:	b4 c0       	rjmp	.+360    	; 0x24a2 <main+0x560>
		}
		else if (G_Oprtion == '=')
    233a:	8f a9       	ldd	r24, Y+55	; 0x37
    233c:	8d 33       	cpi	r24, 0x3D	; 61
    233e:	89 f4       	brne	.+34     	; 0x2362 <main+0x420>
		{
			G_Result = G_Operand1 ;
    2340:	8b a9       	ldd	r24, Y+51	; 0x33
    2342:	9c a9       	ldd	r25, Y+52	; 0x34
    2344:	ad a9       	ldd	r26, Y+53	; 0x35
    2346:	be a9       	ldd	r27, Y+54	; 0x36
    2348:	8b a7       	std	Y+43, r24	; 0x2b
    234a:	9c a7       	std	Y+44, r25	; 0x2c
    234c:	ad a7       	std	Y+45, r26	; 0x2d
    234e:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	9c a5       	ldd	r25, Y+44	; 0x2c
    2354:	ad a5       	ldd	r26, Y+45	; 0x2d
    2356:	be a5       	ldd	r27, Y+46	; 0x2e
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    2360:	a0 c0       	rjmp	.+320    	; 0x24a2 <main+0x560>
		}
		else if (G_Oprtion == '/')
    2362:	8f a9       	ldd	r24, Y+55	; 0x37
    2364:	8f 32       	cpi	r24, 0x2F	; 47
    2366:	09 f0       	breq	.+2      	; 0x236a <main+0x428>
    2368:	9c c0       	rjmp	.+312    	; 0x24a2 <main+0x560>
		{
			if(G_Operand2 != 0)
    236a:	8f a5       	ldd	r24, Y+47	; 0x2f
    236c:	98 a9       	ldd	r25, Y+48	; 0x30
    236e:	a9 a9       	ldd	r26, Y+49	; 0x31
    2370:	ba a9       	ldd	r27, Y+50	; 0x32
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	a1 05       	cpc	r26, r1
    2376:	b1 05       	cpc	r27, r1
    2378:	d9 f0       	breq	.+54     	; 0x23b0 <main+0x46e>
			{
				G_Result = G_Operand1 / G_Operand2 ;
    237a:	8b a9       	ldd	r24, Y+51	; 0x33
    237c:	9c a9       	ldd	r25, Y+52	; 0x34
    237e:	ad a9       	ldd	r26, Y+53	; 0x35
    2380:	be a9       	ldd	r27, Y+54	; 0x36
    2382:	2f a5       	ldd	r18, Y+47	; 0x2f
    2384:	38 a9       	ldd	r19, Y+48	; 0x30
    2386:	49 a9       	ldd	r20, Y+49	; 0x31
    2388:	5a a9       	ldd	r21, Y+50	; 0x32
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    2392:	da 01       	movw	r26, r20
    2394:	c9 01       	movw	r24, r18
    2396:	8b a7       	std	Y+43, r24	; 0x2b
    2398:	9c a7       	std	Y+44, r25	; 0x2c
    239a:	ad a7       	std	Y+45, r26	; 0x2d
    239c:	be a7       	std	Y+46, r27	; 0x2e
				HLCD_voidDisplayNum(G_Result) ;
    239e:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a2:	ad a5       	ldd	r26, Y+45	; 0x2d
    23a4:	be a5       	ldd	r27, Y+46	; 0x2e
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    23ae:	79 c0       	rjmp	.+242    	; 0x24a2 <main+0x560>
			}
			else
			{
				HLCD_voidSendStr("Math Error") ;
    23b0:	8d e7       	ldi	r24, 0x7D	; 125
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <HLCD_voidSendStr>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	aa e7       	ldi	r26, 0x7A	; 122
    23be:	b4 e4       	ldi	r27, 0x44	; 68
    23c0:	89 8f       	std	Y+25, r24	; 0x19
    23c2:	9a 8f       	std	Y+26, r25	; 0x1a
    23c4:	ab 8f       	std	Y+27, r26	; 0x1b
    23c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	9e 8b       	std	Y+22, r25	; 0x16
    23e4:	af 8b       	std	Y+23, r26	; 0x17
    23e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <main+0x4c8>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <main+0x546>
	else if (__tmp > 65535)
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <main+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	69 8d       	ldd	r22, Y+25	; 0x19
    2424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	0f c0       	rjmp	.+30     	; 0x246a <main+0x528>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
    2454:	89 89       	ldd	r24, Y+17	; 0x11
    2456:	9a 89       	ldd	r25, Y+18	; 0x12
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <main+0x516>
    245c:	9a 8b       	std	Y+18, r25	; 0x12
    245e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <main+0x50a>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <main+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6d 89       	ldd	r22, Y+21	; 0x15
    2476:	7e 89       	ldd	r23, Y+22	; 0x16
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	98 89       	ldd	r25, Y+16	; 0x10
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x552>
    2498:	98 8b       	std	Y+16, r25	; 0x10
    249a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000) ;
				HLCD_voidLCDClr() ;
    249c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    24a0:	e9 cd       	rjmp	.-1070   	; 0x2074 <main+0x132>
				break ;
			}
		}
		G_PrssdKy = HKPD_u8GetPressedKey() ;
    24a2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    24a6:	89 af       	std	Y+57, r24	; 0x39
		HLCD_voidLCDClr() ;
    24a8:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    24ac:	e3 cd       	rjmp	.-1082   	; 0x2074 <main+0x132>
	    break ;
	}
	}
	else
	{
		G_Operand1 = 0 ;
    24ae:	1b aa       	std	Y+51, r1	; 0x33
    24b0:	1c aa       	std	Y+52, r1	; 0x34
    24b2:	1d aa       	std	Y+53, r1	; 0x35
    24b4:	1e aa       	std	Y+54, r1	; 0x36
		HLCD_voidDisplayNum(G_Result) ;
    24b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ba:	ad a5       	ldd	r26, Y+45	; 0x2d
    24bc:	be a5       	ldd	r27, Y+46	; 0x2e
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
		HLCD_voidSendData(' ') ;
    24c6:	80 e2       	ldi	r24, 0x20	; 32
    24c8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		G_Oprtion = G_PrssdKy ;
    24cc:	89 ad       	ldd	r24, Y+57	; 0x39
    24ce:	8f ab       	std	Y+55, r24	; 0x37
		if(G_Oprtion != '=')
    24d0:	8f a9       	ldd	r24, Y+55	; 0x37
    24d2:	8d 33       	cpi	r24, 0x3D	; 61
    24d4:	19 f0       	breq	.+6      	; 0x24dc <main+0x59a>
		{
		HLCD_voidSendData(G_Oprtion) ;
    24d6:	8f a9       	ldd	r24, Y+55	; 0x37
    24d8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		}
		HLCD_voidSendData(' ') ;
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		G_Sign = HKPD_u8GetPressedKey() ;
    24e2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    24e6:	88 af       	std	Y+56, r24	; 0x38
		if(G_Sign == '-')
    24e8:	88 ad       	ldd	r24, Y+56	; 0x38
    24ea:	8d 32       	cpi	r24, 0x2D	; 45
    24ec:	39 f4       	brne	.+14     	; 0x24fc <main+0x5ba>
		{
			HLCD_voidSendData(G_Sign) ;
    24ee:	88 ad       	ldd	r24, Y+56	; 0x38
    24f0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
			G_PrssdKy = HKPD_u8GetPressedKey() ;
    24f4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    24f8:	89 af       	std	Y+57, r24	; 0x39
    24fa:	33 c0       	rjmp	.+102    	; 0x2562 <main+0x620>
		}
		else
		{
			G_PrssdKy = G_Sign ;
    24fc:	88 ad       	ldd	r24, Y+56	; 0x38
    24fe:	89 af       	std	Y+57, r24	; 0x39
    2500:	30 c0       	rjmp	.+96     	; 0x2562 <main+0x620>
		}
		while((G_PrssdKy != '=') && (G_PrssdKy != '/') && (G_PrssdKy != '*') && (G_PrssdKy != '+') && (G_PrssdKy != '-'))
		{
			if((G_PrssdKy >= 0) && (G_PrssdKy <= 9))
    2502:	89 ad       	ldd	r24, Y+57	; 0x39
    2504:	8a 30       	cpi	r24, 0x0A	; 10
    2506:	20 f5       	brcc	.+72     	; 0x2550 <main+0x60e>
			{
				HLCD_voidDisplayNum(G_PrssdKy) ;
    2508:	89 ad       	ldd	r24, Y+57	; 0x39
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
				G_Operand1 = G_Operand1*10 + G_PrssdKy ;
    251a:	8b a9       	ldd	r24, Y+51	; 0x33
    251c:	9c a9       	ldd	r25, Y+52	; 0x34
    251e:	ad a9       	ldd	r26, Y+53	; 0x35
    2520:	be a9       	ldd	r27, Y+54	; 0x36
    2522:	2a e0       	ldi	r18, 0x0A	; 10
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    2532:	9b 01       	movw	r18, r22
    2534:	ac 01       	movw	r20, r24
    2536:	89 ad       	ldd	r24, Y+57	; 0x39
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a0 e0       	ldi	r26, 0x00	; 0
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	82 0f       	add	r24, r18
    2542:	93 1f       	adc	r25, r19
    2544:	a4 1f       	adc	r26, r20
    2546:	b5 1f       	adc	r27, r21
    2548:	8b ab       	std	Y+51, r24	; 0x33
    254a:	9c ab       	std	Y+52, r25	; 0x34
    254c:	ad ab       	std	Y+53, r26	; 0x35
    254e:	be ab       	std	Y+54, r27	; 0x36
			}
			if(G_PrssdKy == 'C')
    2550:	89 ad       	ldd	r24, Y+57	; 0x39
    2552:	83 34       	cpi	r24, 0x43	; 67
    2554:	19 f4       	brne	.+6      	; 0x255c <main+0x61a>
			{
				HLCD_voidLCDClr() ; break ;
    2556:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    255a:	12 c0       	rjmp	.+36     	; 0x2580 <main+0x63e>
			}
			G_PrssdKy = HKPD_u8GetPressedKey() ;
    255c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    2560:	89 af       	std	Y+57, r24	; 0x39
		}
		else
		{
			G_PrssdKy = G_Sign ;
		}
		while((G_PrssdKy != '=') && (G_PrssdKy != '/') && (G_PrssdKy != '*') && (G_PrssdKy != '+') && (G_PrssdKy != '-'))
    2562:	89 ad       	ldd	r24, Y+57	; 0x39
    2564:	8d 33       	cpi	r24, 0x3D	; 61
    2566:	61 f0       	breq	.+24     	; 0x2580 <main+0x63e>
    2568:	89 ad       	ldd	r24, Y+57	; 0x39
    256a:	8f 32       	cpi	r24, 0x2F	; 47
    256c:	49 f0       	breq	.+18     	; 0x2580 <main+0x63e>
    256e:	89 ad       	ldd	r24, Y+57	; 0x39
    2570:	8a 32       	cpi	r24, 0x2A	; 42
    2572:	31 f0       	breq	.+12     	; 0x2580 <main+0x63e>
    2574:	89 ad       	ldd	r24, Y+57	; 0x39
    2576:	8b 32       	cpi	r24, 0x2B	; 43
    2578:	19 f0       	breq	.+6      	; 0x2580 <main+0x63e>
    257a:	89 ad       	ldd	r24, Y+57	; 0x39
    257c:	8d 32       	cpi	r24, 0x2D	; 45
    257e:	09 f6       	brne	.-126    	; 0x2502 <main+0x5c0>
				HLCD_voidLCDClr() ; break ;
			}
			G_PrssdKy = HKPD_u8GetPressedKey() ;
		}

		if(G_Sign == '-')
    2580:	88 ad       	ldd	r24, Y+56	; 0x38
    2582:	8d 32       	cpi	r24, 0x2D	; 45
    2584:	79 f4       	brne	.+30     	; 0x25a4 <main+0x662>
		{
			G_Operand1*=-1 ;
    2586:	8b a9       	ldd	r24, Y+51	; 0x33
    2588:	9c a9       	ldd	r25, Y+52	; 0x34
    258a:	ad a9       	ldd	r26, Y+53	; 0x35
    258c:	be a9       	ldd	r27, Y+54	; 0x36
    258e:	b0 95       	com	r27
    2590:	a0 95       	com	r26
    2592:	90 95       	com	r25
    2594:	81 95       	neg	r24
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	af 4f       	sbci	r26, 0xFF	; 255
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	8b ab       	std	Y+51, r24	; 0x33
    259e:	9c ab       	std	Y+52, r25	; 0x34
    25a0:	ad ab       	std	Y+53, r26	; 0x35
    25a2:	be ab       	std	Y+54, r27	; 0x36
		}

		HLCD_voidSetCursor(2,1) ;
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <HLCD_voidSetCursor>
		HLCD_voidSendData('=') ;
    25ac:	8d e3       	ldi	r24, 0x3D	; 61
    25ae:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		HLCD_voidSendData(' ') ;
    25b2:	80 e2       	ldi	r24, 0x20	; 32
    25b4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		//operation
		if(G_Oprtion == '+')
    25b8:	8f a9       	ldd	r24, Y+55	; 0x37
    25ba:	8b 32       	cpi	r24, 0x2B	; 43
    25bc:	c9 f4       	brne	.+50     	; 0x25f0 <main+0x6ae>
		{
			G_Result += G_Operand1 ;
    25be:	2b a5       	ldd	r18, Y+43	; 0x2b
    25c0:	3c a5       	ldd	r19, Y+44	; 0x2c
    25c2:	4d a5       	ldd	r20, Y+45	; 0x2d
    25c4:	5e a5       	ldd	r21, Y+46	; 0x2e
    25c6:	8b a9       	ldd	r24, Y+51	; 0x33
    25c8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ca:	ad a9       	ldd	r26, Y+53	; 0x35
    25cc:	be a9       	ldd	r27, Y+54	; 0x36
    25ce:	82 0f       	add	r24, r18
    25d0:	93 1f       	adc	r25, r19
    25d2:	a4 1f       	adc	r26, r20
    25d4:	b5 1f       	adc	r27, r21
    25d6:	8b a7       	std	Y+43, r24	; 0x2b
    25d8:	9c a7       	std	Y+44, r25	; 0x2c
    25da:	ad a7       	std	Y+45, r26	; 0x2d
    25dc:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    25de:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e2:	ad a5       	ldd	r26, Y+45	; 0x2d
    25e4:	be a5       	ldd	r27, Y+46	; 0x2e
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    25ee:	f6 c0       	rjmp	.+492    	; 0x27dc <main+0x89a>
		}
		else if (G_Oprtion == '-')
    25f0:	8f a9       	ldd	r24, Y+55	; 0x37
    25f2:	8d 32       	cpi	r24, 0x2D	; 45
    25f4:	e9 f4       	brne	.+58     	; 0x2630 <main+0x6ee>
		{
			G_Result -= G_Operand1 ;
    25f6:	2b a5       	ldd	r18, Y+43	; 0x2b
    25f8:	3c a5       	ldd	r19, Y+44	; 0x2c
    25fa:	4d a5       	ldd	r20, Y+45	; 0x2d
    25fc:	5e a5       	ldd	r21, Y+46	; 0x2e
    25fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2600:	9c a9       	ldd	r25, Y+52	; 0x34
    2602:	ad a9       	ldd	r26, Y+53	; 0x35
    2604:	be a9       	ldd	r27, Y+54	; 0x36
    2606:	79 01       	movw	r14, r18
    2608:	8a 01       	movw	r16, r20
    260a:	e8 1a       	sub	r14, r24
    260c:	f9 0a       	sbc	r15, r25
    260e:	0a 0b       	sbc	r16, r26
    2610:	1b 0b       	sbc	r17, r27
    2612:	d8 01       	movw	r26, r16
    2614:	c7 01       	movw	r24, r14
    2616:	8b a7       	std	Y+43, r24	; 0x2b
    2618:	9c a7       	std	Y+44, r25	; 0x2c
    261a:	ad a7       	std	Y+45, r26	; 0x2d
    261c:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    261e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2620:	9c a5       	ldd	r25, Y+44	; 0x2c
    2622:	ad a5       	ldd	r26, Y+45	; 0x2d
    2624:	be a5       	ldd	r27, Y+46	; 0x2e
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    262e:	d6 c0       	rjmp	.+428    	; 0x27dc <main+0x89a>
		}
		else if (G_Oprtion == '*')
    2630:	8f a9       	ldd	r24, Y+55	; 0x37
    2632:	8a 32       	cpi	r24, 0x2A	; 42
    2634:	d9 f4       	brne	.+54     	; 0x266c <main+0x72a>
		{
			G_Result *= G_Operand1 ;
    2636:	8b a5       	ldd	r24, Y+43	; 0x2b
    2638:	9c a5       	ldd	r25, Y+44	; 0x2c
    263a:	ad a5       	ldd	r26, Y+45	; 0x2d
    263c:	be a5       	ldd	r27, Y+46	; 0x2e
    263e:	2b a9       	ldd	r18, Y+51	; 0x33
    2640:	3c a9       	ldd	r19, Y+52	; 0x34
    2642:	4d a9       	ldd	r20, Y+53	; 0x35
    2644:	5e a9       	ldd	r21, Y+54	; 0x36
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__mulsi3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8b a7       	std	Y+43, r24	; 0x2b
    2654:	9c a7       	std	Y+44, r25	; 0x2c
    2656:	ad a7       	std	Y+45, r26	; 0x2d
    2658:	be a7       	std	Y+46, r27	; 0x2e
			HLCD_voidDisplayNum(G_Result) ;
    265a:	8b a5       	ldd	r24, Y+43	; 0x2b
    265c:	9c a5       	ldd	r25, Y+44	; 0x2c
    265e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2660:	be a5       	ldd	r27, Y+46	; 0x2e
    2662:	bc 01       	movw	r22, r24
    2664:	cd 01       	movw	r24, r26
    2666:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    266a:	b8 c0       	rjmp	.+368    	; 0x27dc <main+0x89a>
		}
		else if (G_Oprtion == '=')
    266c:	8f a9       	ldd	r24, Y+55	; 0x37
    266e:	8d 33       	cpi	r24, 0x3D	; 61
    2670:	49 f4       	brne	.+18     	; 0x2684 <main+0x742>
		{
			HLCD_voidDisplayNum(G_Result) ;
    2672:	8b a5       	ldd	r24, Y+43	; 0x2b
    2674:	9c a5       	ldd	r25, Y+44	; 0x2c
    2676:	ad a5       	ldd	r26, Y+45	; 0x2d
    2678:	be a5       	ldd	r27, Y+46	; 0x2e
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    2682:	ac c0       	rjmp	.+344    	; 0x27dc <main+0x89a>
		}
		else if (G_Oprtion == '/')
    2684:	8f a9       	ldd	r24, Y+55	; 0x37
    2686:	8f 32       	cpi	r24, 0x2F	; 47
    2688:	09 f0       	breq	.+2      	; 0x268c <main+0x74a>
    268a:	a8 c0       	rjmp	.+336    	; 0x27dc <main+0x89a>
		{
			if(G_Operand1 != 0)
    268c:	8b a9       	ldd	r24, Y+51	; 0x33
    268e:	9c a9       	ldd	r25, Y+52	; 0x34
    2690:	ad a9       	ldd	r26, Y+53	; 0x35
    2692:	be a9       	ldd	r27, Y+54	; 0x36
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	a1 05       	cpc	r26, r1
    2698:	b1 05       	cpc	r27, r1
    269a:	d9 f0       	breq	.+54     	; 0x26d2 <main+0x790>
			{
				G_Result /= G_Operand1 ;
    269c:	8b a5       	ldd	r24, Y+43	; 0x2b
    269e:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a0:	ad a5       	ldd	r26, Y+45	; 0x2d
    26a2:	be a5       	ldd	r27, Y+46	; 0x2e
    26a4:	2b a9       	ldd	r18, Y+51	; 0x33
    26a6:	3c a9       	ldd	r19, Y+52	; 0x34
    26a8:	4d a9       	ldd	r20, Y+53	; 0x35
    26aa:	5e a9       	ldd	r21, Y+54	; 0x36
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 13 14 	call	0x2826	; 0x2826 <__divmodsi4>
    26b4:	da 01       	movw	r26, r20
    26b6:	c9 01       	movw	r24, r18
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
    26ba:	9c a7       	std	Y+44, r25	; 0x2c
    26bc:	ad a7       	std	Y+45, r26	; 0x2d
    26be:	be a7       	std	Y+46, r27	; 0x2e
				HLCD_voidDisplayNum(G_Result) ;
    26c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c4:	ad a5       	ldd	r26, Y+45	; 0x2d
    26c6:	be a5       	ldd	r27, Y+46	; 0x2e
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HLCD_voidDisplayNum>
    26d0:	85 c0       	rjmp	.+266    	; 0x27dc <main+0x89a>
			}
			else
			{
				HLCD_voidSendStr("Math Error") ;
    26d2:	8d e7       	ldi	r24, 0x7D	; 125
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <HLCD_voidSendStr>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	aa e7       	ldi	r26, 0x7A	; 122
    26e0:	b4 e4       	ldi	r27, 0x44	; 68
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a ef       	ldi	r20, 0xFA	; 250
    26f8:	54 e4       	ldi	r21, 0x44	; 68
    26fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <main+0x7ea>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <main+0x868>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <main+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <main+0x84a>
    276e:	88 ec       	ldi	r24, 0xC8	; 200
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <main+0x838>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <main+0x82c>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <main+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <main+0x874>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000) ;
				HLCD_voidLCDClr() ;
    27be:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
		}
		G_PrssdKy = HKPD_u8GetPressedKey() ;
		HLCD_voidLCDClr() ;
	}
}
}
    27c2:	e9 96       	adiw	r28, 0x39	; 57
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	08 95       	ret
				_delay_ms(1000) ;
				HLCD_voidLCDClr() ;
				break ;
			}
		}
		G_PrssdKy = HKPD_u8GetPressedKey() ;
    27dc:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <HKPD_u8GetPressedKey>
    27e0:	89 af       	std	Y+57, r24	; 0x39
		HLCD_voidLCDClr() ;
    27e2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <HLCD_voidLCDClr>
    27e6:	46 cc       	rjmp	.-1908   	; 0x2074 <main+0x132>

000027e8 <__mulsi3>:
    27e8:	62 9f       	mul	r22, r18
    27ea:	d0 01       	movw	r26, r0
    27ec:	73 9f       	mul	r23, r19
    27ee:	f0 01       	movw	r30, r0
    27f0:	82 9f       	mul	r24, r18
    27f2:	e0 0d       	add	r30, r0
    27f4:	f1 1d       	adc	r31, r1
    27f6:	64 9f       	mul	r22, r20
    27f8:	e0 0d       	add	r30, r0
    27fa:	f1 1d       	adc	r31, r1
    27fc:	92 9f       	mul	r25, r18
    27fe:	f0 0d       	add	r31, r0
    2800:	83 9f       	mul	r24, r19
    2802:	f0 0d       	add	r31, r0
    2804:	74 9f       	mul	r23, r20
    2806:	f0 0d       	add	r31, r0
    2808:	65 9f       	mul	r22, r21
    280a:	f0 0d       	add	r31, r0
    280c:	99 27       	eor	r25, r25
    280e:	72 9f       	mul	r23, r18
    2810:	b0 0d       	add	r27, r0
    2812:	e1 1d       	adc	r30, r1
    2814:	f9 1f       	adc	r31, r25
    2816:	63 9f       	mul	r22, r19
    2818:	b0 0d       	add	r27, r0
    281a:	e1 1d       	adc	r30, r1
    281c:	f9 1f       	adc	r31, r25
    281e:	bd 01       	movw	r22, r26
    2820:	cf 01       	movw	r24, r30
    2822:	11 24       	eor	r1, r1
    2824:	08 95       	ret

00002826 <__divmodsi4>:
    2826:	97 fb       	bst	r25, 7
    2828:	09 2e       	mov	r0, r25
    282a:	05 26       	eor	r0, r21
    282c:	0e d0       	rcall	.+28     	; 0x284a <__divmodsi4_neg1>
    282e:	57 fd       	sbrc	r21, 7
    2830:	04 d0       	rcall	.+8      	; 0x283a <__divmodsi4_neg2>
    2832:	14 d0       	rcall	.+40     	; 0x285c <__udivmodsi4>
    2834:	0a d0       	rcall	.+20     	; 0x284a <__divmodsi4_neg1>
    2836:	00 1c       	adc	r0, r0
    2838:	38 f4       	brcc	.+14     	; 0x2848 <__divmodsi4_exit>

0000283a <__divmodsi4_neg2>:
    283a:	50 95       	com	r21
    283c:	40 95       	com	r20
    283e:	30 95       	com	r19
    2840:	21 95       	neg	r18
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	4f 4f       	sbci	r20, 0xFF	; 255
    2846:	5f 4f       	sbci	r21, 0xFF	; 255

00002848 <__divmodsi4_exit>:
    2848:	08 95       	ret

0000284a <__divmodsi4_neg1>:
    284a:	f6 f7       	brtc	.-4      	; 0x2848 <__divmodsi4_exit>
    284c:	90 95       	com	r25
    284e:	80 95       	com	r24
    2850:	70 95       	com	r23
    2852:	61 95       	neg	r22
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	8f 4f       	sbci	r24, 0xFF	; 255
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	08 95       	ret

0000285c <__udivmodsi4>:
    285c:	a1 e2       	ldi	r26, 0x21	; 33
    285e:	1a 2e       	mov	r1, r26
    2860:	aa 1b       	sub	r26, r26
    2862:	bb 1b       	sub	r27, r27
    2864:	fd 01       	movw	r30, r26
    2866:	0d c0       	rjmp	.+26     	; 0x2882 <__udivmodsi4_ep>

00002868 <__udivmodsi4_loop>:
    2868:	aa 1f       	adc	r26, r26
    286a:	bb 1f       	adc	r27, r27
    286c:	ee 1f       	adc	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	a2 17       	cp	r26, r18
    2872:	b3 07       	cpc	r27, r19
    2874:	e4 07       	cpc	r30, r20
    2876:	f5 07       	cpc	r31, r21
    2878:	20 f0       	brcs	.+8      	; 0x2882 <__udivmodsi4_ep>
    287a:	a2 1b       	sub	r26, r18
    287c:	b3 0b       	sbc	r27, r19
    287e:	e4 0b       	sbc	r30, r20
    2880:	f5 0b       	sbc	r31, r21

00002882 <__udivmodsi4_ep>:
    2882:	66 1f       	adc	r22, r22
    2884:	77 1f       	adc	r23, r23
    2886:	88 1f       	adc	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	1a 94       	dec	r1
    288c:	69 f7       	brne	.-38     	; 0x2868 <__udivmodsi4_loop>
    288e:	60 95       	com	r22
    2890:	70 95       	com	r23
    2892:	80 95       	com	r24
    2894:	90 95       	com	r25
    2896:	9b 01       	movw	r18, r22
    2898:	ac 01       	movw	r20, r24
    289a:	bd 01       	movw	r22, r26
    289c:	cf 01       	movw	r24, r30
    289e:	08 95       	ret

000028a0 <__prologue_saves__>:
    28a0:	2f 92       	push	r2
    28a2:	3f 92       	push	r3
    28a4:	4f 92       	push	r4
    28a6:	5f 92       	push	r5
    28a8:	6f 92       	push	r6
    28aa:	7f 92       	push	r7
    28ac:	8f 92       	push	r8
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	ca 1b       	sub	r28, r26
    28ca:	db 0b       	sbc	r29, r27
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	09 94       	ijmp

000028d8 <__epilogue_restores__>:
    28d8:	2a 88       	ldd	r2, Y+18	; 0x12
    28da:	39 88       	ldd	r3, Y+17	; 0x11
    28dc:	48 88       	ldd	r4, Y+16	; 0x10
    28de:	5f 84       	ldd	r5, Y+15	; 0x0f
    28e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ea:	b9 84       	ldd	r11, Y+9	; 0x09
    28ec:	c8 84       	ldd	r12, Y+8	; 0x08
    28ee:	df 80       	ldd	r13, Y+7	; 0x07
    28f0:	ee 80       	ldd	r14, Y+6	; 0x06
    28f2:	fd 80       	ldd	r15, Y+5	; 0x05
    28f4:	0c 81       	ldd	r16, Y+4	; 0x04
    28f6:	1b 81       	ldd	r17, Y+3	; 0x03
    28f8:	aa 81       	ldd	r26, Y+2	; 0x02
    28fa:	b9 81       	ldd	r27, Y+1	; 0x01
    28fc:	ce 0f       	add	r28, r30
    28fe:	d1 1d       	adc	r29, r1
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	ed 01       	movw	r28, r26
    290c:	08 95       	ret

0000290e <_exit>:
    290e:	f8 94       	cli

00002910 <__stop_program>:
    2910:	ff cf       	rjmp	.-2      	; 0x2910 <__stop_program>
